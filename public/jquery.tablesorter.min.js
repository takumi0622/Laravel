/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/jquery.tablesorter.min.js":
/*!************************************************!*\
  !*** ./resources/js/jquery.tablesorter.min.js ***!
  \************************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*! TableSorter (FORK) v2.31.3 */\n\n/*\n* Client-side table sorting with ease!\n* @requires jQuery v1.2.6+\n*\n* Copyright (c) 2007 Christian Bach\n* fork maintained by Rob Garrison\n*\n* Examples and original docs at: http://tablesorter.com\n* Dual licensed under the MIT and GPL licenses:\n* http://www.opensource.org/licenses/mit-license.php\n* http://www.gnu.org/licenses/gpl.html\n*\n* @type jQuery\n* @name tablesorter (FORK)\n* @cat Plugins/Tablesorter\n* @author Christian Bach - christian.bach@polyester.se\n* @contributor Rob Garrison - https://github.com/Mottie/tablesorter\n* @docs (fork) - https://mottie.github.io/tablesorter/docs/\n*/\n\n/*jshint browser:true, jquery:true, unused:false, expr: true */\n;\n\n(function ($) {\n  'use strict';\n\n  var ts = $.tablesorter = {\n    version: '2.31.3',\n    parsers: [],\n    widgets: [],\n    defaults: {\n      // *** appearance\n      theme: 'default',\n      // adds tablesorter-{theme} to the table for styling\n      widthFixed: false,\n      // adds colgroup to fix widths of columns\n      showProcessing: false,\n      // show an indeterminate timer icon in the header when the table is sorted or filtered.\n      headerTemplate: '{content}',\n      // header layout template (HTML ok); {content} = innerHTML, {icon} = <i></i> // class from cssIcon\n      onRenderTemplate: null,\n      // function( index, template ) { return template; }, // template is a string\n      onRenderHeader: null,\n      // function( index ) {}, // nothing to return\n      // *** functionality\n      cancelSelection: true,\n      // prevent text selection in the header\n      tabIndex: true,\n      // add tabindex to header for keyboard accessibility\n      dateFormat: 'mmddyyyy',\n      // other options: 'ddmmyyy' or 'yyyymmdd'\n      sortMultiSortKey: 'shiftKey',\n      // key used to select additional columns\n      sortResetKey: 'ctrlKey',\n      // key used to remove sorting on a column\n      usNumberFormat: true,\n      // false for German '1.234.567,89' or French '1 234 567,89'\n      delayInit: false,\n      // if false, the parsed table contents will not update until the first sort\n      serverSideSorting: false,\n      // if true, server-side sorting should be performed because client-side sorting will be disabled, but the ui and events will still be used.\n      resort: true,\n      // default setting to trigger a resort after an 'update', 'addRows', 'updateCell', etc has completed\n      // *** sort options\n      headers: {},\n      // set sorter, string, empty, locked order, sortInitialOrder, filter, etc.\n      ignoreCase: true,\n      // ignore case while sorting\n      sortForce: null,\n      // column(s) first sorted; always applied\n      sortList: [],\n      // Initial sort order; applied initially; updated when manually sorted\n      sortAppend: null,\n      // column(s) sorted last; always applied\n      sortStable: false,\n      // when sorting two rows with exactly the same content, the original sort order is maintained\n      sortInitialOrder: 'asc',\n      // sort direction on first click\n      sortLocaleCompare: false,\n      // replace equivalent character (accented characters)\n      sortReset: false,\n      // third click on the header will reset column to default - unsorted\n      sortRestart: false,\n      // restart sort to 'sortInitialOrder' when clicking on previously unsorted columns\n      emptyTo: 'bottom',\n      // sort empty cell to bottom, top, none, zero, emptyMax, emptyMin\n      stringTo: 'max',\n      // sort strings in numerical column as max, min, top, bottom, zero\n      duplicateSpan: true,\n      // colspan cells in the tbody will have duplicated content in the cache for each spanned column\n      textExtraction: 'basic',\n      // text extraction method/function - function( node, table, cellIndex ) {}\n      textAttribute: 'data-text',\n      // data-attribute that contains alternate cell text (used in default textExtraction function)\n      textSorter: null,\n      // choose overall or specific column sorter function( a, b, direction, table, columnIndex ) [alt: ts.sortText]\n      numberSorter: null,\n      // choose overall numeric sorter function( a, b, direction, maxColumnValue )\n      // *** widget options\n      initWidgets: true,\n      // apply widgets on tablesorter initialization\n      widgetClass: 'widget-{name}',\n      // table class name template to match to include a widget\n      widgets: [],\n      // method to add widgets, e.g. widgets: ['zebra']\n      widgetOptions: {\n        zebra: ['even', 'odd'] // zebra widget alternating row class names\n\n      },\n      // *** callbacks\n      initialized: null,\n      // function( table ) {},\n      // *** extra css class names\n      tableClass: '',\n      cssAsc: '',\n      cssDesc: '',\n      cssNone: '',\n      cssHeader: '',\n      cssHeaderRow: '',\n      cssProcessing: '',\n      // processing icon applied to header during sort/filter\n      cssChildRow: 'tablesorter-childRow',\n      // class name indiciating that a row is to be attached to its parent\n      cssInfoBlock: 'tablesorter-infoOnly',\n      // don't sort tbody with this class name (only one class name allowed here!)\n      cssNoSort: 'tablesorter-noSort',\n      // class name added to element inside header; clicking on it won't cause a sort\n      cssIgnoreRow: 'tablesorter-ignoreRow',\n      // header row to ignore; cells within this row will not be added to c.$headers\n      cssIcon: 'tablesorter-icon',\n      // if this class does not exist, the {icon} will not be added from the headerTemplate\n      cssIconNone: '',\n      // class name added to the icon when there is no column sort\n      cssIconAsc: '',\n      // class name added to the icon when the column has an ascending sort\n      cssIconDesc: '',\n      // class name added to the icon when the column has a descending sort\n      cssIconDisabled: '',\n      // class name added to the icon when the column has a disabled sort\n      // *** events\n      pointerClick: 'click',\n      pointerDown: 'mousedown',\n      pointerUp: 'mouseup',\n      // *** selectors\n      selectorHeaders: '> thead th, > thead td',\n      selectorSort: 'th, td',\n      // jQuery selector of content within selectorHeaders that is clickable to trigger a sort\n      selectorRemove: '.remove-me',\n      // *** advanced\n      debug: false,\n      // *** Internal variables\n      headerList: [],\n      empties: {},\n      strings: {},\n      parsers: [],\n      // *** parser options for validator; values must be falsy!\n      globalize: 0,\n      imgAttr: 0 // removed: widgetZebra: { css: ['even', 'odd'] }\n\n    },\n    // internal css classes - these will ALWAYS be added to\n    // the table and MUST only contain one class name - fixes #381\n    css: {\n      table: 'tablesorter',\n      cssHasChild: 'tablesorter-hasChildRow',\n      childRow: 'tablesorter-childRow',\n      colgroup: 'tablesorter-colgroup',\n      header: 'tablesorter-header',\n      headerRow: 'tablesorter-headerRow',\n      headerIn: 'tablesorter-header-inner',\n      icon: 'tablesorter-icon',\n      processing: 'tablesorter-processing',\n      sortAsc: 'tablesorter-headerAsc',\n      sortDesc: 'tablesorter-headerDesc',\n      sortNone: 'tablesorter-headerUnSorted'\n    },\n    // labels applied to sortable headers for accessibility (aria) support\n    language: {\n      sortAsc: 'Ascending sort applied, ',\n      sortDesc: 'Descending sort applied, ',\n      sortNone: 'No sort applied, ',\n      sortDisabled: 'sorting is disabled',\n      nextAsc: 'activate to apply an ascending sort',\n      nextDesc: 'activate to apply a descending sort',\n      nextNone: 'activate to remove the sort'\n    },\n    regex: {\n      templateContent: /\\{content\\}/g,\n      templateIcon: /\\{icon\\}/g,\n      templateName: /\\{name\\}/i,\n      spaces: /\\s+/g,\n      nonWord: /\\W/g,\n      formElements: /(input|select|button|textarea)/i,\n      // *** sort functions ***\n      // regex used in natural sort\n      // chunk/tokenize numbers & letters\n      chunk: /(^([+\\-]?(?:\\d*)(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)?$|^0x[0-9a-f]+$|\\d+)/gi,\n      // replace chunks @ ends\n      chunks: /(^\\\\0|\\\\0$)/,\n      hex: /^0x[0-9a-f]+$/i,\n      // *** formatFloat ***\n      comma: /,/g,\n      digitNonUS: /[\\s|\\.]/g,\n      digitNegativeTest: /^\\s*\\([.\\d]+\\)/,\n      digitNegativeReplace: /^\\s*\\(([.\\d]+)\\)/,\n      // *** isDigit ***\n      digitTest: /^[\\-+(]?\\d+[)]?$/,\n      digitReplace: /[,.'\"\\s]/g\n    },\n    // digit sort, text location\n    string: {\n      max: 1,\n      min: -1,\n      emptymin: 1,\n      emptymax: -1,\n      zero: 0,\n      none: 0,\n      'null': 0,\n      top: true,\n      bottom: false\n    },\n    keyCodes: {\n      enter: 13\n    },\n    // placeholder date parser data (globalize)\n    dates: {},\n    // These methods can be applied on table.config instance\n    instanceMethods: {},\n\n    /*\n    ▄█████ ██████ ██████ ██  ██ █████▄\n    ▀█▄    ██▄▄     ██   ██  ██ ██▄▄██\n       ▀█▄ ██▀▀     ██   ██  ██ ██▀▀▀\n    █████▀ ██████   ██   ▀████▀ ██\n    */\n    setup: function setup(table, c) {\n      // if no thead or tbody, or tablesorter is already present, quit\n      if (!table || !table.tHead || table.tBodies.length === 0 || table.hasInitialized === true) {\n        if (ts.debug(c, 'core')) {\n          if (table.hasInitialized) {\n            console.warn('Stopping initialization. Tablesorter has already been initialized');\n          } else {\n            console.error('Stopping initialization! No table, thead or tbody', table);\n          }\n        }\n\n        return;\n      }\n\n      var tmp = '',\n          $table = $(table),\n          meta = $.metadata; // initialization flag\n\n      table.hasInitialized = false; // table is being processed flag\n\n      table.isProcessing = true; // make sure to store the config object\n\n      table.config = c; // save the settings where they read\n\n      $.data(table, 'tablesorter', c);\n\n      if (ts.debug(c, 'core')) {\n        console[console.group ? 'group' : 'log']('Initializing tablesorter v' + ts.version);\n        $.data(table, 'startoveralltimer', new Date());\n      } // removing this in version 3 (only supports jQuery 1.7+)\n\n\n      c.supportsDataObject = function (version) {\n        version[0] = parseInt(version[0], 10);\n        return version[0] > 1 || version[0] === 1 && parseInt(version[1], 10) >= 4;\n      }($.fn.jquery.split('.')); // ensure case insensitivity\n\n\n      c.emptyTo = c.emptyTo.toLowerCase();\n      c.stringTo = c.stringTo.toLowerCase();\n      c.last = {\n        sortList: [],\n        clickedIndex: -1\n      }; // add table theme class only if there isn't already one there\n\n      if (!/tablesorter\\-/.test($table.attr('class'))) {\n        tmp = c.theme !== '' ? ' tablesorter-' + c.theme : '';\n      } // give the table a unique id, which will be used in namespace binding\n\n\n      if (!c.namespace) {\n        c.namespace = '.tablesorter' + Math.random().toString(16).slice(2);\n      } else {\n        // make sure namespace starts with a period & doesn't have weird characters\n        c.namespace = '.' + c.namespace.replace(ts.regex.nonWord, '');\n      }\n\n      c.table = table;\n      c.$table = $table // add namespace to table to allow bindings on extra elements to target\n      // the parent table (e.g. parser-input-select)\n      .addClass(ts.css.table + ' ' + c.tableClass + tmp + ' ' + c.namespace.slice(1)).attr('role', 'grid');\n      c.$headers = $table.find(c.selectorHeaders);\n      c.$table.children().children('tr').attr('role', 'row');\n      c.$tbodies = $table.children('tbody:not(.' + c.cssInfoBlock + ')').attr({\n        'aria-live': 'polite',\n        'aria-relevant': 'all'\n      });\n\n      if (c.$table.children('caption').length) {\n        tmp = c.$table.children('caption')[0];\n\n        if (!tmp.id) {\n          tmp.id = c.namespace.slice(1) + 'caption';\n        }\n\n        c.$table.attr('aria-labelledby', tmp.id);\n      }\n\n      c.widgetInit = {}; // keep a list of initialized widgets\n      // change textExtraction via data-attribute\n\n      c.textExtraction = c.$table.attr('data-text-extraction') || c.textExtraction || 'basic'; // build headers\n\n      ts.buildHeaders(c); // fixate columns if the users supplies the fixedWidth option\n      // do this after theme has been applied\n\n      ts.fixColumnWidth(table); // add widgets from class name\n\n      ts.addWidgetFromClass(table); // add widget options before parsing (e.g. grouping widget has parser settings)\n\n      ts.applyWidgetOptions(table); // try to auto detect column type, and store in tables config\n\n      ts.setupParsers(c); // start total row count at zero\n\n      c.totalRows = 0; // only validate options while debugging. See #1528\n\n      if (c.debug) {\n        ts.validateOptions(c);\n      } // build the cache for the tbody cells\n      // delayInit will delay building the cache until the user starts a sort\n\n\n      if (!c.delayInit) {\n        ts.buildCache(c);\n      } // bind all header events and methods\n\n\n      ts.bindEvents(table, c.$headers, true);\n      ts.bindMethods(c); // get sort list from jQuery data or metadata\n      // in jQuery < 1.4, an error occurs when calling $table.data()\n\n      if (c.supportsDataObject && typeof $table.data().sortlist !== 'undefined') {\n        c.sortList = $table.data().sortlist;\n      } else if (meta && $table.metadata() && $table.metadata().sortlist) {\n        c.sortList = $table.metadata().sortlist;\n      } // apply widget init code\n\n\n      ts.applyWidget(table, true); // if user has supplied a sort list to constructor\n\n      if (c.sortList.length > 0) {\n        // save sortList before any sortAppend is added\n        c.last.sortList = c.sortList;\n        ts.sortOn(c, c.sortList, {}, !c.initWidgets);\n      } else {\n        ts.setHeadersCss(c);\n\n        if (c.initWidgets) {\n          // apply widget format\n          ts.applyWidget(table, false);\n        }\n      } // show processesing icon\n\n\n      if (c.showProcessing) {\n        $table.unbind('sortBegin' + c.namespace + ' sortEnd' + c.namespace).bind('sortBegin' + c.namespace + ' sortEnd' + c.namespace, function (e) {\n          clearTimeout(c.timerProcessing);\n          ts.isProcessing(table);\n\n          if (e.type === 'sortBegin') {\n            c.timerProcessing = setTimeout(function () {\n              ts.isProcessing(table, true);\n            }, 500);\n          }\n        });\n      } // initialized\n\n\n      table.hasInitialized = true;\n      table.isProcessing = false;\n\n      if (ts.debug(c, 'core')) {\n        console.log('Overall initialization time:' + ts.benchmark($.data(table, 'startoveralltimer')));\n\n        if (ts.debug(c, 'core') && console.groupEnd) {\n          console.groupEnd();\n        }\n      }\n\n      $table.triggerHandler('tablesorter-initialized', table);\n\n      if (typeof c.initialized === 'function') {\n        c.initialized(table);\n      }\n    },\n    bindMethods: function bindMethods(c) {\n      var $table = c.$table,\n          namespace = c.namespace,\n          events = ('sortReset update updateRows updateAll updateHeaders addRows updateCell updateComplete ' + 'sorton appendCache updateCache applyWidgetId applyWidgets refreshWidgets destroy mouseup ' + 'mouseleave ').split(' ').join(namespace + ' '); // apply easy methods that trigger bound events\n\n      $table.unbind(events.replace(ts.regex.spaces, ' ')).bind('sortReset' + namespace, function (e, callback) {\n        e.stopPropagation(); // using this.config to ensure functions are getting a non-cached version of the config\n\n        ts.sortReset(this.config, function (table) {\n          if (table.isApplyingWidgets) {\n            // multiple triggers in a row... filterReset, then sortReset - see #1361\n            // wait to update widgets\n            setTimeout(function () {\n              ts.applyWidget(table, '', callback);\n            }, 100);\n          } else {\n            ts.applyWidget(table, '', callback);\n          }\n        });\n      }).bind('updateAll' + namespace, function (e, resort, callback) {\n        e.stopPropagation();\n        ts.updateAll(this.config, resort, callback);\n      }).bind('update' + namespace + ' updateRows' + namespace, function (e, resort, callback) {\n        e.stopPropagation();\n        ts.update(this.config, resort, callback);\n      }).bind('updateHeaders' + namespace, function (e, callback) {\n        e.stopPropagation();\n        ts.updateHeaders(this.config, callback);\n      }).bind('updateCell' + namespace, function (e, cell, resort, callback) {\n        e.stopPropagation();\n        ts.updateCell(this.config, cell, resort, callback);\n      }).bind('addRows' + namespace, function (e, $row, resort, callback) {\n        e.stopPropagation();\n        ts.addRows(this.config, $row, resort, callback);\n      }).bind('updateComplete' + namespace, function () {\n        this.isUpdating = false;\n      }).bind('sorton' + namespace, function (e, list, callback, init) {\n        e.stopPropagation();\n        ts.sortOn(this.config, list, callback, init);\n      }).bind('appendCache' + namespace, function (e, callback, init) {\n        e.stopPropagation();\n        ts.appendCache(this.config, init);\n\n        if ($.isFunction(callback)) {\n          callback(this);\n        }\n      }) // $tbodies variable is used by the tbody sorting widget\n      .bind('updateCache' + namespace, function (e, callback, $tbodies) {\n        e.stopPropagation();\n        ts.updateCache(this.config, callback, $tbodies);\n      }).bind('applyWidgetId' + namespace, function (e, id) {\n        e.stopPropagation();\n        ts.applyWidgetId(this, id);\n      }).bind('applyWidgets' + namespace, function (e, callback) {\n        e.stopPropagation(); // apply widgets (false = not initializing)\n\n        ts.applyWidget(this, false, callback);\n      }).bind('refreshWidgets' + namespace, function (e, all, dontapply) {\n        e.stopPropagation();\n        ts.refreshWidgets(this, all, dontapply);\n      }).bind('removeWidget' + namespace, function (e, name, refreshing) {\n        e.stopPropagation();\n        ts.removeWidget(this, name, refreshing);\n      }).bind('destroy' + namespace, function (e, removeClasses, callback) {\n        e.stopPropagation();\n        ts.destroy(this, removeClasses, callback);\n      }).bind('resetToLoadState' + namespace, function (e) {\n        e.stopPropagation(); // remove all widgets\n\n        ts.removeWidget(this, true, false);\n        var tmp = $.extend(true, {}, c.originalSettings); // restore original settings; this clears out current settings, but does not clear\n        // values saved to storage.\n\n        c = $.extend(true, {}, ts.defaults, tmp);\n        c.originalSettings = tmp;\n        this.hasInitialized = false; // setup the entire table again\n\n        ts.setup(this, c);\n      });\n    },\n    bindEvents: function bindEvents(table, $headers, core) {\n      table = $(table)[0];\n      var tmp,\n          c = table.config,\n          namespace = c.namespace,\n          downTarget = null;\n\n      if (core !== true) {\n        $headers.addClass(namespace.slice(1) + '_extra_headers');\n        tmp = ts.getClosest($headers, 'table');\n\n        if (tmp.length && tmp[0].nodeName === 'TABLE' && tmp[0] !== table) {\n          $(tmp[0]).addClass(namespace.slice(1) + '_extra_table');\n        }\n      }\n\n      tmp = (c.pointerDown + ' ' + c.pointerUp + ' ' + c.pointerClick + ' sort keyup ').replace(ts.regex.spaces, ' ').split(' ').join(namespace + ' '); // apply event handling to headers and/or additional headers (stickyheaders, scroller, etc)\n\n      $headers // http://stackoverflow.com/questions/5312849/jquery-find-self;\n      .find(c.selectorSort).add($headers.filter(c.selectorSort)).unbind(tmp).bind(tmp, function (e, external) {\n        var $cell,\n            cell,\n            temp,\n            $target = $(e.target),\n            // wrap event type in spaces, so the match doesn't trigger on inner words\n        type = ' ' + e.type + ' '; // only recognize left clicks\n\n        if ((e.which || e.button) !== 1 && !type.match(' ' + c.pointerClick + ' | sort | keyup ') || // allow pressing enter\n        type === ' keyup ' && e.which !== ts.keyCodes.enter || // allow triggering a click event (e.which is undefined) & ignore physical clicks\n        type.match(' ' + c.pointerClick + ' ') && typeof e.which !== 'undefined') {\n          return;\n        } // ignore mouseup if mousedown wasn't on the same target\n\n\n        if (type.match(' ' + c.pointerUp + ' ') && downTarget !== e.target && external !== true) {\n          return;\n        } // set target on mousedown\n\n\n        if (type.match(' ' + c.pointerDown + ' ')) {\n          downTarget = e.target; // preventDefault needed or jQuery v1.3.2 and older throws an\n          // \"Uncaught TypeError: handler.apply is not a function\" error\n\n          temp = $target.jquery.split('.');\n\n          if (temp[0] === '1' && temp[1] < 4) {\n            e.preventDefault();\n          }\n\n          return;\n        }\n\n        downTarget = null;\n        $cell = ts.getClosest($(this), '.' + ts.css.header); // prevent sort being triggered on form elements\n\n        if (ts.regex.formElements.test(e.target.nodeName) || // nosort class name, or elements within a nosort container\n        $target.hasClass(c.cssNoSort) || $target.parents('.' + c.cssNoSort).length > 0 || // disabled cell directly clicked\n        $cell.hasClass('sorter-false') || // elements within a button\n        $target.parents('button').length > 0) {\n          return !c.cancelSelection;\n        }\n\n        if (c.delayInit && ts.isEmptyObject(c.cache)) {\n          ts.buildCache(c);\n        } // use column index from data-attribute or index of current row; fixes #1116\n\n\n        c.last.clickedIndex = $cell.attr('data-column') || $cell.index();\n        cell = c.$headerIndexed[c.last.clickedIndex][0];\n\n        if (cell && !cell.sortDisabled) {\n          ts.initSort(c, cell, e);\n        }\n      });\n\n      if (c.cancelSelection) {\n        // cancel selection\n        $headers.attr('unselectable', 'on').bind('selectstart', false).css({\n          'user-select': 'none',\n          'MozUserSelect': 'none' // not needed for jQuery 1.8+\n\n        });\n      }\n    },\n    buildHeaders: function buildHeaders(c) {\n      var $temp, icon, timer, indx;\n      c.headerList = [];\n      c.headerContent = [];\n      c.sortVars = [];\n\n      if (ts.debug(c, 'core')) {\n        timer = new Date();\n      } // children tr in tfoot - see issue #196 & #547\n      // don't pass table.config to computeColumnIndex here - widgets (math) pass it to \"quickly\" index tbody cells\n\n\n      c.columns = ts.computeColumnIndex(c.$table.children('thead, tfoot').children('tr')); // add icon if cssIcon option exists\n\n      icon = c.cssIcon ? '<i class=\"' + (c.cssIcon === ts.css.icon ? ts.css.icon : c.cssIcon + ' ' + ts.css.icon) + '\"></i>' : ''; // redefine c.$headers here in case of an updateAll that replaces or adds an entire header cell - see #683\n\n      c.$headers = $($.map(c.$table.find(c.selectorHeaders), function (elem, index) {\n        var configHeaders,\n            header,\n            column,\n            template,\n            tmp,\n            $elem = $(elem); // ignore cell (don't add it to c.$headers) if row has ignoreRow class\n\n        if (ts.getClosest($elem, 'tr').hasClass(c.cssIgnoreRow)) {\n          return;\n        } // transfer data-column to element if not th/td - #1459\n\n\n        if (!/(th|td)/i.test(elem.nodeName)) {\n          tmp = ts.getClosest($elem, 'th, td');\n          $elem.attr('data-column', tmp.attr('data-column'));\n        } // make sure to get header cell & not column indexed cell\n\n\n        configHeaders = ts.getColumnData(c.table, c.headers, index, true); // save original header content\n\n        c.headerContent[index] = $elem.html(); // if headerTemplate is empty, don't reformat the header cell\n\n        if (c.headerTemplate !== '' && !$elem.find('.' + ts.css.headerIn).length) {\n          // set up header template\n          template = c.headerTemplate.replace(ts.regex.templateContent, $elem.html()).replace(ts.regex.templateIcon, $elem.find('.' + ts.css.icon).length ? '' : icon);\n\n          if (c.onRenderTemplate) {\n            header = c.onRenderTemplate.apply($elem, [index, template]); // only change t if something is returned\n\n            if (header && typeof header === 'string') {\n              template = header;\n            }\n          }\n\n          $elem.html('<div class=\"' + ts.css.headerIn + '\">' + template + '</div>'); // faster than wrapInner\n        }\n\n        if (c.onRenderHeader) {\n          c.onRenderHeader.apply($elem, [index, c, c.$table]);\n        }\n\n        column = parseInt($elem.attr('data-column'), 10);\n        elem.column = column;\n        tmp = ts.getOrder(ts.getData($elem, configHeaders, 'sortInitialOrder') || c.sortInitialOrder); // this may get updated numerous times if there are multiple rows\n\n        c.sortVars[column] = {\n          count: -1,\n          // set to -1 because clicking on the header automatically adds one\n          order: tmp ? c.sortReset ? [1, 0, 2] : [1, 0] : // desc, asc, unsorted\n          c.sortReset ? [0, 1, 2] : [0, 1],\n          // asc, desc, unsorted\n          lockedOrder: false,\n          sortedBy: ''\n        };\n        tmp = ts.getData($elem, configHeaders, 'lockedOrder') || false;\n\n        if (typeof tmp !== 'undefined' && tmp !== false) {\n          c.sortVars[column].lockedOrder = true;\n          c.sortVars[column].order = ts.getOrder(tmp) ? [1, 1] : [0, 0];\n        } // add cell to headerList\n\n\n        c.headerList[index] = elem;\n        $elem.addClass(ts.css.header + ' ' + c.cssHeader); // add to parent in case there are multiple rows\n\n        ts.getClosest($elem, 'tr').addClass(ts.css.headerRow + ' ' + c.cssHeaderRow).attr('role', 'row'); // allow keyboard cursor to focus on element\n\n        if (c.tabIndex) {\n          $elem.attr('tabindex', 0);\n        }\n\n        return elem;\n      })); // cache headers per column\n\n      c.$headerIndexed = [];\n\n      for (indx = 0; indx < c.columns; indx++) {\n        // colspan in header making a column undefined\n        if (ts.isEmptyObject(c.sortVars[indx])) {\n          c.sortVars[indx] = {};\n        } // Use c.$headers.parent() in case selectorHeaders doesn't point to the th/td\n\n\n        $temp = c.$headers.filter('[data-column=\"' + indx + '\"]'); // target sortable column cells, unless there are none, then use non-sortable cells\n        // .last() added in jQuery 1.4; use .filter(':last') to maintain compatibility with jQuery v1.2.6\n\n        c.$headerIndexed[indx] = $temp.length ? $temp.not('.sorter-false').length ? $temp.not('.sorter-false').filter(':last') : $temp.filter(':last') : $();\n      }\n\n      c.$table.find(c.selectorHeaders).attr({\n        scope: 'col',\n        role: 'columnheader'\n      }); // enable/disable sorting\n\n      ts.updateHeader(c);\n\n      if (ts.debug(c, 'core')) {\n        console.log('Built headers:' + ts.benchmark(timer));\n        console.log(c.$headers);\n      }\n    },\n    // Use it to add a set of methods to table.config which will be available for all tables.\n    // This should be done before table initialization\n    addInstanceMethods: function addInstanceMethods(methods) {\n      $.extend(ts.instanceMethods, methods);\n    },\n\n    /*\n    █████▄ ▄████▄ █████▄ ▄█████ ██████ █████▄ ▄█████\n    ██▄▄██ ██▄▄██ ██▄▄██ ▀█▄    ██▄▄   ██▄▄██ ▀█▄\n    ██▀▀▀  ██▀▀██ ██▀██     ▀█▄ ██▀▀   ██▀██     ▀█▄\n    ██     ██  ██ ██  ██ █████▀ ██████ ██  ██ █████▀\n    */\n    setupParsers: function setupParsers(c, $tbodies) {\n      var rows,\n          list,\n          span,\n          max,\n          colIndex,\n          indx,\n          header,\n          configHeaders,\n          noParser,\n          parser,\n          extractor,\n          time,\n          tbody,\n          len,\n          table = c.table,\n          tbodyIndex = 0,\n          debug = ts.debug(c, 'core'),\n          debugOutput = {}; // update table bodies in case we start with an empty table\n\n      c.$tbodies = c.$table.children('tbody:not(.' + c.cssInfoBlock + ')');\n      tbody = typeof $tbodies === 'undefined' ? c.$tbodies : $tbodies;\n      len = tbody.length;\n\n      if (len === 0) {\n        return debug ? console.warn('Warning: *Empty table!* Not building a parser cache') : '';\n      } else if (debug) {\n        time = new Date();\n        console[console.group ? 'group' : 'log']('Detecting parsers for each column');\n      }\n\n      list = {\n        extractors: [],\n        parsers: []\n      };\n\n      while (tbodyIndex < len) {\n        rows = tbody[tbodyIndex].rows;\n\n        if (rows.length) {\n          colIndex = 0;\n          max = c.columns;\n\n          for (indx = 0; indx < max; indx++) {\n            header = c.$headerIndexed[colIndex];\n\n            if (header && header.length) {\n              // get column indexed table cell; adding true parameter fixes #1362 but\n              // it would break backwards compatibility...\n              configHeaders = ts.getColumnData(table, c.headers, colIndex); // , true );\n              // get column parser/extractor\n\n              extractor = ts.getParserById(ts.getData(header, configHeaders, 'extractor'));\n              parser = ts.getParserById(ts.getData(header, configHeaders, 'sorter'));\n              noParser = ts.getData(header, configHeaders, 'parser') === 'false'; // empty cells behaviour - keeping emptyToBottom for backwards compatibility\n\n              c.empties[colIndex] = (ts.getData(header, configHeaders, 'empty') || c.emptyTo || (c.emptyToBottom ? 'bottom' : 'top')).toLowerCase(); // text strings behaviour in numerical sorts\n\n              c.strings[colIndex] = (ts.getData(header, configHeaders, 'string') || c.stringTo || 'max').toLowerCase();\n\n              if (noParser) {\n                parser = ts.getParserById('no-parser');\n              }\n\n              if (!extractor) {\n                // For now, maybe detect someday\n                extractor = false;\n              }\n\n              if (!parser) {\n                parser = ts.detectParserForColumn(c, rows, -1, colIndex);\n              }\n\n              if (debug) {\n                debugOutput['(' + colIndex + ') ' + header.text()] = {\n                  parser: parser.id,\n                  extractor: extractor ? extractor.id : 'none',\n                  string: c.strings[colIndex],\n                  empty: c.empties[colIndex]\n                };\n              }\n\n              list.parsers[colIndex] = parser;\n              list.extractors[colIndex] = extractor;\n              span = header[0].colSpan - 1;\n\n              if (span > 0) {\n                colIndex += span;\n                max += span;\n\n                while (span + 1 > 0) {\n                  // set colspan columns to use the same parsers & extractors\n                  list.parsers[colIndex - span] = parser;\n                  list.extractors[colIndex - span] = extractor;\n                  span--;\n                }\n              }\n            }\n\n            colIndex++;\n          }\n        }\n\n        tbodyIndex += list.parsers.length ? len : 1;\n      }\n\n      if (debug) {\n        if (!ts.isEmptyObject(debugOutput)) {\n          console[console.table ? 'table' : 'log'](debugOutput);\n        } else {\n          console.warn('  No parsers detected!');\n        }\n\n        console.log('Completed detecting parsers' + ts.benchmark(time));\n\n        if (console.groupEnd) {\n          console.groupEnd();\n        }\n      }\n\n      c.parsers = list.parsers;\n      c.extractors = list.extractors;\n    },\n    addParser: function addParser(parser) {\n      var indx,\n          len = ts.parsers.length,\n          add = true;\n\n      for (indx = 0; indx < len; indx++) {\n        if (ts.parsers[indx].id.toLowerCase() === parser.id.toLowerCase()) {\n          add = false;\n        }\n      }\n\n      if (add) {\n        ts.parsers[ts.parsers.length] = parser;\n      }\n    },\n    getParserById: function getParserById(name) {\n      /*jshint eqeqeq:false */\n      // eslint-disable-next-line eqeqeq\n      if (name == 'false') {\n        return false;\n      }\n\n      var indx,\n          len = ts.parsers.length;\n\n      for (indx = 0; indx < len; indx++) {\n        if (ts.parsers[indx].id.toLowerCase() === name.toString().toLowerCase()) {\n          return ts.parsers[indx];\n        }\n      }\n\n      return false;\n    },\n    detectParserForColumn: function detectParserForColumn(c, rows, rowIndex, cellIndex) {\n      var cur,\n          $node,\n          row,\n          indx = ts.parsers.length,\n          node = false,\n          nodeValue = '',\n          debug = ts.debug(c, 'core'),\n          keepLooking = true;\n\n      while (nodeValue === '' && keepLooking) {\n        rowIndex++;\n        row = rows[rowIndex]; // stop looking after 50 empty rows\n\n        if (row && rowIndex < 50) {\n          if (row.className.indexOf(ts.cssIgnoreRow) < 0) {\n            node = rows[rowIndex].cells[cellIndex];\n            nodeValue = ts.getElementText(c, node, cellIndex);\n            $node = $(node);\n\n            if (debug) {\n              console.log('Checking if value was empty on row ' + rowIndex + ', column: ' + cellIndex + ': \"' + nodeValue + '\"');\n            }\n          }\n        } else {\n          keepLooking = false;\n        }\n      }\n\n      while (--indx >= 0) {\n        cur = ts.parsers[indx]; // ignore the default text parser because it will always be true\n\n        if (cur && cur.id !== 'text' && cur.is && cur.is(nodeValue, c.table, node, $node)) {\n          return cur;\n        }\n      } // nothing found, return the generic parser (text)\n\n\n      return ts.getParserById('text');\n    },\n    getElementText: function getElementText(c, node, cellIndex) {\n      if (!node) {\n        return '';\n      }\n\n      var tmp,\n          extract = c.textExtraction || '',\n          // node could be a jquery object\n      // http://jsperf.com/jquery-vs-instanceof-jquery/2\n      $node = node.jquery ? node : $(node);\n\n      if (typeof extract === 'string') {\n        // check data-attribute first when set to 'basic'; don't use node.innerText - it's really slow!\n        // http://www.kellegous.com/j/2013/02/27/innertext-vs-textcontent/\n        if (extract === 'basic' && typeof (tmp = $node.attr(c.textAttribute)) !== 'undefined') {\n          return $.trim(tmp);\n        }\n\n        return $.trim(node.textContent || $node.text());\n      } else {\n        if (typeof extract === 'function') {\n          return $.trim(extract($node[0], c.table, cellIndex));\n        } else if (typeof (tmp = ts.getColumnData(c.table, extract, cellIndex)) === 'function') {\n          return $.trim(tmp($node[0], c.table, cellIndex));\n        }\n      } // fallback\n\n\n      return $.trim($node[0].textContent || $node.text());\n    },\n    // centralized function to extract/parse cell contents\n    getParsedText: function getParsedText(c, cell, colIndex, txt) {\n      if (typeof txt === 'undefined') {\n        txt = ts.getElementText(c, cell, colIndex);\n      } // if no parser, make sure to return the txt\n\n\n      var val = '' + txt,\n          parser = c.parsers[colIndex],\n          extractor = c.extractors[colIndex];\n\n      if (parser) {\n        // do extract before parsing, if there is one\n        if (extractor && typeof extractor.format === 'function') {\n          txt = extractor.format(txt, c.table, cell, colIndex);\n        } // allow parsing if the string is empty, previously parsing would change it to zero,\n        // in case the parser needs to extract data from the table cell attributes\n\n\n        val = parser.id === 'no-parser' ? '' : // make sure txt is a string (extractor may have converted it)\n        parser.format('' + txt, c.table, cell, colIndex);\n\n        if (c.ignoreCase && typeof val === 'string') {\n          val = val.toLowerCase();\n        }\n      }\n\n      return val;\n    },\n\n    /*\n    ▄████▄ ▄████▄ ▄████▄ ██  ██ ██████\n    ██  ▀▀ ██▄▄██ ██  ▀▀ ██▄▄██ ██▄▄\n    ██  ▄▄ ██▀▀██ ██  ▄▄ ██▀▀██ ██▀▀\n    ▀████▀ ██  ██ ▀████▀ ██  ██ ██████\n    */\n    buildCache: function buildCache(c, callback, $tbodies) {\n      var cache,\n          val,\n          txt,\n          rowIndex,\n          colIndex,\n          tbodyIndex,\n          $tbody,\n          $row,\n          cols,\n          $cells,\n          cell,\n          cacheTime,\n          totalRows,\n          rowData,\n          prevRowData,\n          colMax,\n          span,\n          cacheIndex,\n          hasParser,\n          max,\n          len,\n          index,\n          table = c.table,\n          parsers = c.parsers,\n          debug = ts.debug(c, 'core'); // update tbody variable\n\n      c.$tbodies = c.$table.children('tbody:not(.' + c.cssInfoBlock + ')');\n      $tbody = typeof $tbodies === 'undefined' ? c.$tbodies : $tbodies, c.cache = {};\n      c.totalRows = 0; // if no parsers found, return - it's an empty table.\n\n      if (!parsers) {\n        return debug ? console.warn('Warning: *Empty table!* Not building a cache') : '';\n      }\n\n      if (debug) {\n        cacheTime = new Date();\n      } // processing icon\n\n\n      if (c.showProcessing) {\n        ts.isProcessing(table, true);\n      }\n\n      for (tbodyIndex = 0; tbodyIndex < $tbody.length; tbodyIndex++) {\n        colMax = []; // column max value per tbody\n\n        cache = c.cache[tbodyIndex] = {\n          normalized: [] // array of normalized row data; last entry contains 'rowData' above\n          // colMax: #   // added at the end\n\n        };\n        totalRows = $tbody[tbodyIndex] && $tbody[tbodyIndex].rows.length || 0;\n\n        for (rowIndex = 0; rowIndex < totalRows; ++rowIndex) {\n          rowData = {\n            // order: original row order #\n            // $row : jQuery Object[]\n            child: [],\n            // child row text (filter widget)\n            raw: [] // original row text\n\n          };\n          /** Add the table data to main data array */\n\n          $row = $($tbody[tbodyIndex].rows[rowIndex]);\n          cols = []; // ignore \"remove-me\" rows\n\n          if ($row.hasClass(c.selectorRemove.slice(1))) {\n            continue;\n          } // if this is a child row, add it to the last row's children and continue to the next row\n          // ignore child row class, if it is the first row\n\n\n          if ($row.hasClass(c.cssChildRow) && rowIndex !== 0) {\n            len = cache.normalized.length - 1;\n            prevRowData = cache.normalized[len][c.columns];\n            prevRowData.$row = prevRowData.$row.add($row); // add 'hasChild' class name to parent row\n\n            if (!$row.prev().hasClass(c.cssChildRow)) {\n              $row.prev().addClass(ts.css.cssHasChild);\n            } // save child row content (un-parsed!)\n\n\n            $cells = $row.children('th, td');\n            len = prevRowData.child.length;\n            prevRowData.child[len] = []; // child row content does not account for colspans/rowspans; so indexing may be off\n\n            cacheIndex = 0;\n            max = c.columns;\n\n            for (colIndex = 0; colIndex < max; colIndex++) {\n              cell = $cells[colIndex];\n\n              if (cell) {\n                prevRowData.child[len][colIndex] = ts.getParsedText(c, cell, colIndex);\n                span = $cells[colIndex].colSpan - 1;\n\n                if (span > 0) {\n                  cacheIndex += span;\n                  max += span;\n                }\n              }\n\n              cacheIndex++;\n            } // go to the next for loop\n\n\n            continue;\n          }\n\n          rowData.$row = $row;\n          rowData.order = rowIndex; // add original row position to rowCache\n\n          cacheIndex = 0;\n          max = c.columns;\n\n          for (colIndex = 0; colIndex < max; ++colIndex) {\n            cell = $row[0].cells[colIndex];\n\n            if (cell && cacheIndex < c.columns) {\n              hasParser = typeof parsers[cacheIndex] !== 'undefined';\n\n              if (!hasParser && debug) {\n                console.warn('No parser found for row: ' + rowIndex + ', column: ' + colIndex + '; cell containing: \"' + $(cell).text() + '\"; does it have a header?');\n              }\n\n              val = ts.getElementText(c, cell, cacheIndex);\n              rowData.raw[cacheIndex] = val; // save original row text\n              // save raw column text even if there is no parser set\n\n              txt = ts.getParsedText(c, cell, cacheIndex, val);\n              cols[cacheIndex] = txt;\n\n              if (hasParser && (parsers[cacheIndex].type || '').toLowerCase() === 'numeric') {\n                // determine column max value (ignore sign)\n                colMax[cacheIndex] = Math.max(Math.abs(txt) || 0, colMax[cacheIndex] || 0);\n              } // allow colSpan in tbody\n\n\n              span = cell.colSpan - 1;\n\n              if (span > 0) {\n                index = 0;\n\n                while (index <= span) {\n                  // duplicate text (or not) to spanned columns\n                  // instead of setting duplicate span to empty string, use textExtraction to try to get a value\n                  // see http://stackoverflow.com/q/36449711/145346\n                  txt = c.duplicateSpan || index === 0 ? txt : typeof c.textExtraction !== 'string' ? ts.getElementText(c, cell, cacheIndex + index) || '' : '';\n                  rowData.raw[cacheIndex + index] = txt;\n                  cols[cacheIndex + index] = txt;\n                  index++;\n                }\n\n                cacheIndex += span;\n                max += span;\n              }\n            }\n\n            cacheIndex++;\n          } // ensure rowData is always in the same location (after the last column)\n\n\n          cols[c.columns] = rowData;\n          cache.normalized[cache.normalized.length] = cols;\n        }\n\n        cache.colMax = colMax; // total up rows, not including child rows\n\n        c.totalRows += cache.normalized.length;\n      }\n\n      if (c.showProcessing) {\n        ts.isProcessing(table); // remove processing icon\n      }\n\n      if (debug) {\n        len = Math.min(5, c.cache[0].normalized.length);\n        console[console.group ? 'group' : 'log']('Building cache for ' + c.totalRows + ' rows (showing ' + len + ' rows in log) and ' + c.columns + ' columns' + ts.benchmark(cacheTime));\n        val = {};\n\n        for (colIndex = 0; colIndex < c.columns; colIndex++) {\n          for (cacheIndex = 0; cacheIndex < len; cacheIndex++) {\n            if (!val['row: ' + cacheIndex]) {\n              val['row: ' + cacheIndex] = {};\n            }\n\n            val['row: ' + cacheIndex][c.$headerIndexed[colIndex].text()] = c.cache[0].normalized[cacheIndex][colIndex];\n          }\n        }\n\n        console[console.table ? 'table' : 'log'](val);\n\n        if (console.groupEnd) {\n          console.groupEnd();\n        }\n      }\n\n      if ($.isFunction(callback)) {\n        callback(table);\n      }\n    },\n    getColumnText: function getColumnText(table, column, callback, rowFilter) {\n      table = $(table)[0];\n      var tbodyIndex,\n          rowIndex,\n          cache,\n          row,\n          tbodyLen,\n          rowLen,\n          raw,\n          parsed,\n          $cell,\n          result,\n          hasCallback = typeof callback === 'function',\n          allColumns = column === 'all',\n          data = {\n        raw: [],\n        parsed: [],\n        $cell: []\n      },\n          c = table.config;\n\n      if (ts.isEmptyObject(c)) {\n        if (ts.debug(c, 'core')) {\n          console.warn('No cache found - aborting getColumnText function!');\n        }\n      } else {\n        tbodyLen = c.$tbodies.length;\n\n        for (tbodyIndex = 0; tbodyIndex < tbodyLen; tbodyIndex++) {\n          cache = c.cache[tbodyIndex].normalized;\n          rowLen = cache.length;\n\n          for (rowIndex = 0; rowIndex < rowLen; rowIndex++) {\n            row = cache[rowIndex];\n\n            if (rowFilter && !row[c.columns].$row.is(rowFilter)) {\n              continue;\n            }\n\n            result = true;\n            parsed = allColumns ? row.slice(0, c.columns) : row[column];\n            row = row[c.columns];\n            raw = allColumns ? row.raw : row.raw[column];\n            $cell = allColumns ? row.$row.children() : row.$row.children().eq(column);\n\n            if (hasCallback) {\n              result = callback({\n                tbodyIndex: tbodyIndex,\n                rowIndex: rowIndex,\n                parsed: parsed,\n                raw: raw,\n                $row: row.$row,\n                $cell: $cell\n              });\n            }\n\n            if (result !== false) {\n              data.parsed[data.parsed.length] = parsed;\n              data.raw[data.raw.length] = raw;\n              data.$cell[data.$cell.length] = $cell;\n            }\n          }\n        } // return everything\n\n\n        return data;\n      }\n    },\n\n    /*\n    ██  ██ █████▄ █████▄ ▄████▄ ██████ ██████\n    ██  ██ ██▄▄██ ██  ██ ██▄▄██   ██   ██▄▄\n    ██  ██ ██▀▀▀  ██  ██ ██▀▀██   ██   ██▀▀\n    ▀████▀ ██     █████▀ ██  ██   ██   ██████\n    */\n    setHeadersCss: function setHeadersCss(c) {\n      var indx,\n          column,\n          list = c.sortList,\n          len = list.length,\n          none = ts.css.sortNone + ' ' + c.cssNone,\n          css = [ts.css.sortAsc + ' ' + c.cssAsc, ts.css.sortDesc + ' ' + c.cssDesc],\n          cssIcon = [c.cssIconAsc, c.cssIconDesc, c.cssIconNone],\n          aria = ['ascending', 'descending'],\n          updateColumnSort = function updateColumnSort($el, index) {\n        $el.removeClass(none).addClass(css[index]).attr('aria-sort', aria[index]).find('.' + ts.css.icon).removeClass(cssIcon[2]).addClass(cssIcon[index]);\n      },\n          // find the footer\n      $extras = c.$table.find('tfoot tr').children('td, th').add($(c.namespace + '_extra_headers')).removeClass(css.join(' ')),\n          // remove all header information\n      $sorted = c.$headers.add($('thead ' + c.namespace + '_extra_headers')).removeClass(css.join(' ')).addClass(none).attr('aria-sort', 'none').find('.' + ts.css.icon).removeClass(cssIcon.join(' ')).end(); // add css none to all sortable headers\n\n\n      $sorted.not('.sorter-false').find('.' + ts.css.icon).addClass(cssIcon[2]); // add disabled css icon class\n\n      if (c.cssIconDisabled) {\n        $sorted.filter('.sorter-false').find('.' + ts.css.icon).addClass(c.cssIconDisabled);\n      }\n\n      for (indx = 0; indx < len; indx++) {\n        // direction = 2 means reset!\n        if (list[indx][1] !== 2) {\n          // multicolumn sorting updating - see #1005\n          // .not(function() {}) needs jQuery 1.4\n          // filter(function(i, el) {}) <- el is undefined in jQuery v1.2.6\n          $sorted = c.$headers.filter(function (i) {\n            // only include headers that are in the sortList (this includes colspans)\n            var include = true,\n                $el = c.$headers.eq(i),\n                col = parseInt($el.attr('data-column'), 10),\n                end = col + ts.getClosest($el, 'th, td')[0].colSpan;\n\n            for (; col < end; col++) {\n              include = include ? include || ts.isValueInArray(col, c.sortList) > -1 : false;\n            }\n\n            return include;\n          }); // choose the :last in case there are nested columns\n\n          $sorted = $sorted.not('.sorter-false').filter('[data-column=\"' + list[indx][0] + '\"]' + (len === 1 ? ':last' : ''));\n\n          if ($sorted.length) {\n            for (column = 0; column < $sorted.length; column++) {\n              if (!$sorted[column].sortDisabled) {\n                updateColumnSort($sorted.eq(column), list[indx][1]);\n              }\n            }\n          } // add sorted class to footer & extra headers, if they exist\n\n\n          if ($extras.length) {\n            updateColumnSort($extras.filter('[data-column=\"' + list[indx][0] + '\"]'), list[indx][1]);\n          }\n        }\n      } // add verbose aria labels\n\n\n      len = c.$headers.length;\n\n      for (indx = 0; indx < len; indx++) {\n        ts.setColumnAriaLabel(c, c.$headers.eq(indx));\n      }\n    },\n    getClosest: function getClosest($el, selector) {\n      // jQuery v1.2.6 doesn't have closest()\n      if ($.fn.closest) {\n        return $el.closest(selector);\n      }\n\n      return $el.is(selector) ? $el : $el.parents(selector).filter(':first');\n    },\n    // nextSort (optional), lets you disable next sort text\n    setColumnAriaLabel: function setColumnAriaLabel(c, $header, nextSort) {\n      if ($header.length) {\n        var column = parseInt($header.attr('data-column'), 10),\n            vars = c.sortVars[column],\n            tmp = $header.hasClass(ts.css.sortAsc) ? 'sortAsc' : $header.hasClass(ts.css.sortDesc) ? 'sortDesc' : 'sortNone',\n            txt = $.trim($header.text()) + ': ' + ts.language[tmp];\n\n        if ($header.hasClass('sorter-false') || nextSort === false) {\n          txt += ts.language.sortDisabled;\n        } else {\n          tmp = (vars.count + 1) % vars.order.length;\n          nextSort = vars.order[tmp]; // if nextSort\n\n          txt += ts.language[nextSort === 0 ? 'nextAsc' : nextSort === 1 ? 'nextDesc' : 'nextNone'];\n        }\n\n        $header.attr('aria-label', txt);\n\n        if (vars.sortedBy) {\n          $header.attr('data-sortedBy', vars.sortedBy);\n        } else {\n          $header.removeAttr('data-sortedBy');\n        }\n      }\n    },\n    updateHeader: function updateHeader(c) {\n      var index,\n          isDisabled,\n          $header,\n          col,\n          table = c.table,\n          len = c.$headers.length;\n\n      for (index = 0; index < len; index++) {\n        $header = c.$headers.eq(index);\n        col = ts.getColumnData(table, c.headers, index, true); // add 'sorter-false' class if 'parser-false' is set\n\n        isDisabled = ts.getData($header, col, 'sorter') === 'false' || ts.getData($header, col, 'parser') === 'false';\n        ts.setColumnSort(c, $header, isDisabled);\n      }\n    },\n    setColumnSort: function setColumnSort(c, $header, isDisabled) {\n      var id = c.table.id;\n      $header[0].sortDisabled = isDisabled;\n      $header[isDisabled ? 'addClass' : 'removeClass']('sorter-false').attr('aria-disabled', '' + isDisabled); // disable tab index on disabled cells\n\n      if (c.tabIndex) {\n        if (isDisabled) {\n          $header.removeAttr('tabindex');\n        } else {\n          $header.attr('tabindex', '0');\n        }\n      } // aria-controls - requires table ID\n\n\n      if (id) {\n        if (isDisabled) {\n          $header.removeAttr('aria-controls');\n        } else {\n          $header.attr('aria-controls', id);\n        }\n      }\n    },\n    updateHeaderSortCount: function updateHeaderSortCount(c, list) {\n      var col,\n          dir,\n          group,\n          indx,\n          primary,\n          temp,\n          val,\n          order,\n          sortList = list || c.sortList,\n          len = sortList.length;\n      c.sortList = [];\n\n      for (indx = 0; indx < len; indx++) {\n        val = sortList[indx]; // ensure all sortList values are numeric - fixes #127\n\n        col = parseInt(val[0], 10); // prevents error if sorton array is wrong\n\n        if (col < c.columns) {\n          // set order if not already defined - due to colspan header without associated header cell\n          // adding this check prevents a javascript error\n          if (!c.sortVars[col].order) {\n            if (ts.getOrder(c.sortInitialOrder)) {\n              order = c.sortReset ? [1, 0, 2] : [1, 0];\n            } else {\n              order = c.sortReset ? [0, 1, 2] : [0, 1];\n            }\n\n            c.sortVars[col].order = order;\n            c.sortVars[col].count = 0;\n          }\n\n          order = c.sortVars[col].order;\n          dir = ('' + val[1]).match(/^(1|d|s|o|n)/);\n          dir = dir ? dir[0] : ''; // 0/(a)sc (default), 1/(d)esc, (s)ame, (o)pposite, (n)ext\n\n          switch (dir) {\n            case '1':\n            case 'd':\n              // descending\n              dir = 1;\n              break;\n\n            case 's':\n              // same direction (as primary column)\n              // if primary sort is set to 's', make it ascending\n              dir = primary || 0;\n              break;\n\n            case 'o':\n              temp = order[(primary || 0) % order.length]; // opposite of primary column; but resets if primary resets\n\n              dir = temp === 0 ? 1 : temp === 1 ? 0 : 2;\n              break;\n\n            case 'n':\n              dir = order[++c.sortVars[col].count % order.length];\n              break;\n\n            default:\n              // ascending\n              dir = 0;\n              break;\n          }\n\n          primary = indx === 0 ? dir : primary;\n          group = [col, parseInt(dir, 10) || 0];\n          c.sortList[c.sortList.length] = group;\n          dir = $.inArray(group[1], order); // fixes issue #167\n\n          c.sortVars[col].count = dir >= 0 ? dir : group[1] % order.length;\n        }\n      }\n    },\n    updateAll: function updateAll(c, resort, callback) {\n      var table = c.table;\n      table.isUpdating = true;\n      ts.refreshWidgets(table, true, true);\n      ts.buildHeaders(c);\n      ts.bindEvents(table, c.$headers, true);\n      ts.bindMethods(c);\n      ts.commonUpdate(c, resort, callback);\n    },\n    update: function update(c, resort, callback) {\n      var table = c.table;\n      table.isUpdating = true; // update sorting (if enabled/disabled)\n\n      ts.updateHeader(c);\n      ts.commonUpdate(c, resort, callback);\n    },\n    // simple header update - see #989\n    updateHeaders: function updateHeaders(c, callback) {\n      c.table.isUpdating = true;\n      ts.buildHeaders(c);\n      ts.bindEvents(c.table, c.$headers, true);\n      ts.resortComplete(c, callback);\n    },\n    updateCell: function updateCell(c, cell, resort, callback) {\n      // updateCell for child rows is a mess - we'll ignore them for now\n      // eventually I'll break out the \"update\" row cache code to make everything consistent\n      if ($(cell).closest('tr').hasClass(c.cssChildRow)) {\n        console.warn('Tablesorter Warning! \"updateCell\" for child row content has been disabled, use \"update\" instead');\n        return;\n      }\n\n      if (ts.isEmptyObject(c.cache)) {\n        // empty table, do an update instead - fixes #1099\n        ts.updateHeader(c);\n        ts.commonUpdate(c, resort, callback);\n        return;\n      }\n\n      c.table.isUpdating = true;\n      c.$table.find(c.selectorRemove).remove(); // get position from the dom\n\n      var tmp,\n          indx,\n          row,\n          icell,\n          cache,\n          len,\n          $tbodies = c.$tbodies,\n          $cell = $(cell),\n          // update cache - format: function( s, table, cell, cellIndex )\n      // no closest in jQuery v1.2.6\n      tbodyIndex = $tbodies.index(ts.getClosest($cell, 'tbody')),\n          tbcache = c.cache[tbodyIndex],\n          $row = ts.getClosest($cell, 'tr');\n      cell = $cell[0]; // in case cell is a jQuery object\n      // tbody may not exist if update is initialized while tbody is removed for processing\n\n      if ($tbodies.length && tbodyIndex >= 0) {\n        row = $tbodies.eq(tbodyIndex).find('tr').not('.' + c.cssChildRow).index($row);\n        cache = tbcache.normalized[row];\n        len = $row[0].cells.length;\n\n        if (len !== c.columns) {\n          // colspan in here somewhere!\n          icell = 0;\n          tmp = false;\n\n          for (indx = 0; indx < len; indx++) {\n            if (!tmp && $row[0].cells[indx] !== cell) {\n              icell += $row[0].cells[indx].colSpan;\n            } else {\n              tmp = true;\n            }\n          }\n        } else {\n          icell = $cell.index();\n        }\n\n        tmp = ts.getElementText(c, cell, icell); // raw\n\n        cache[c.columns].raw[icell] = tmp;\n        tmp = ts.getParsedText(c, cell, icell, tmp);\n        cache[icell] = tmp; // parsed\n\n        if ((c.parsers[icell].type || '').toLowerCase() === 'numeric') {\n          // update column max value (ignore sign)\n          tbcache.colMax[icell] = Math.max(Math.abs(tmp) || 0, tbcache.colMax[icell] || 0);\n        }\n\n        tmp = resort !== 'undefined' ? resort : c.resort;\n\n        if (tmp !== false) {\n          // widgets will be reapplied\n          ts.checkResort(c, tmp, callback);\n        } else {\n          // don't reapply widgets is resort is false, just in case it causes\n          // problems with element focus\n          ts.resortComplete(c, callback);\n        }\n      } else {\n        if (ts.debug(c, 'core')) {\n          console.error('updateCell aborted, tbody missing or not within the indicated table');\n        }\n\n        c.table.isUpdating = false;\n      }\n    },\n    addRows: function addRows(c, $row, resort, callback) {\n      var txt,\n          val,\n          tbodyIndex,\n          rowIndex,\n          rows,\n          cellIndex,\n          len,\n          order,\n          cacheIndex,\n          rowData,\n          cells,\n          cell,\n          span,\n          // allow passing a row string if only one non-info tbody exists in the table\n      valid = typeof $row === 'string' && c.$tbodies.length === 1 && /<tr/.test($row || ''),\n          table = c.table;\n\n      if (valid) {\n        $row = $($row);\n        c.$tbodies.append($row);\n      } else if (!$row || // row is a jQuery object?\n      !($row instanceof $) || // row contained in the table?\n      ts.getClosest($row, 'table')[0] !== c.table) {\n        if (ts.debug(c, 'core')) {\n          console.error('addRows method requires (1) a jQuery selector reference to rows that have already ' + 'been added to the table, or (2) row HTML string to be added to a table with only one tbody');\n        }\n\n        return false;\n      }\n\n      table.isUpdating = true;\n\n      if (ts.isEmptyObject(c.cache)) {\n        // empty table, do an update instead - fixes #450\n        ts.updateHeader(c);\n        ts.commonUpdate(c, resort, callback);\n      } else {\n        rows = $row.filter('tr').attr('role', 'row').length;\n        tbodyIndex = c.$tbodies.index($row.parents('tbody').filter(':first')); // fixes adding rows to an empty table - see issue #179\n\n        if (!(c.parsers && c.parsers.length)) {\n          ts.setupParsers(c);\n        } // add each row\n\n\n        for (rowIndex = 0; rowIndex < rows; rowIndex++) {\n          cacheIndex = 0;\n          len = $row[rowIndex].cells.length;\n          order = c.cache[tbodyIndex].normalized.length;\n          cells = [];\n          rowData = {\n            child: [],\n            raw: [],\n            $row: $row.eq(rowIndex),\n            order: order\n          }; // add each cell\n\n          for (cellIndex = 0; cellIndex < len; cellIndex++) {\n            cell = $row[rowIndex].cells[cellIndex];\n            txt = ts.getElementText(c, cell, cacheIndex);\n            rowData.raw[cacheIndex] = txt;\n            val = ts.getParsedText(c, cell, cacheIndex, txt);\n            cells[cacheIndex] = val;\n\n            if ((c.parsers[cacheIndex].type || '').toLowerCase() === 'numeric') {\n              // update column max value (ignore sign)\n              c.cache[tbodyIndex].colMax[cacheIndex] = Math.max(Math.abs(val) || 0, c.cache[tbodyIndex].colMax[cacheIndex] || 0);\n            }\n\n            span = cell.colSpan - 1;\n\n            if (span > 0) {\n              cacheIndex += span;\n            }\n\n            cacheIndex++;\n          } // add the row data to the end\n\n\n          cells[c.columns] = rowData; // update cache\n\n          c.cache[tbodyIndex].normalized[order] = cells;\n        } // resort using current settings\n\n\n        ts.checkResort(c, resort, callback);\n      }\n    },\n    updateCache: function updateCache(c, callback, $tbodies) {\n      // rebuild parsers\n      if (!(c.parsers && c.parsers.length)) {\n        ts.setupParsers(c, $tbodies);\n      } // rebuild the cache map\n\n\n      ts.buildCache(c, callback, $tbodies);\n    },\n    // init flag (true) used by pager plugin to prevent widget application\n    // renamed from appendToTable\n    appendCache: function appendCache(c, init) {\n      var parsed,\n          totalRows,\n          $tbody,\n          $curTbody,\n          rowIndex,\n          tbodyIndex,\n          appendTime,\n          table = c.table,\n          $tbodies = c.$tbodies,\n          rows = [],\n          cache = c.cache; // empty table - fixes #206/#346\n\n      if (ts.isEmptyObject(cache)) {\n        // run pager appender in case the table was just emptied\n        return c.appender ? c.appender(table, rows) : table.isUpdating ? c.$table.triggerHandler('updateComplete', table) : ''; // Fixes #532\n      }\n\n      if (ts.debug(c, 'core')) {\n        appendTime = new Date();\n      }\n\n      for (tbodyIndex = 0; tbodyIndex < $tbodies.length; tbodyIndex++) {\n        $tbody = $tbodies.eq(tbodyIndex);\n\n        if ($tbody.length) {\n          // detach tbody for manipulation\n          $curTbody = ts.processTbody(table, $tbody, true);\n          parsed = cache[tbodyIndex].normalized;\n          totalRows = parsed.length;\n\n          for (rowIndex = 0; rowIndex < totalRows; rowIndex++) {\n            rows[rows.length] = parsed[rowIndex][c.columns].$row; // removeRows used by the pager plugin; don't render if using ajax - fixes #411\n\n            if (!c.appender || c.pager && !c.pager.removeRows && !c.pager.ajax) {\n              $curTbody.append(parsed[rowIndex][c.columns].$row);\n            }\n          } // restore tbody\n\n\n          ts.processTbody(table, $curTbody, false);\n        }\n      }\n\n      if (c.appender) {\n        c.appender(table, rows);\n      }\n\n      if (ts.debug(c, 'core')) {\n        console.log('Rebuilt table' + ts.benchmark(appendTime));\n      } // apply table widgets; but not before ajax completes\n\n\n      if (!init && !c.appender) {\n        ts.applyWidget(table);\n      }\n\n      if (table.isUpdating) {\n        c.$table.triggerHandler('updateComplete', table);\n      }\n    },\n    commonUpdate: function commonUpdate(c, resort, callback) {\n      // remove rows/elements before update\n      c.$table.find(c.selectorRemove).remove(); // rebuild parsers\n\n      ts.setupParsers(c); // rebuild the cache map\n\n      ts.buildCache(c);\n      ts.checkResort(c, resort, callback);\n    },\n\n    /*\n    ▄█████ ▄████▄ █████▄ ██████ ██ █████▄ ▄████▄\n    ▀█▄    ██  ██ ██▄▄██   ██   ██ ██  ██ ██ ▄▄▄\n       ▀█▄ ██  ██ ██▀██    ██   ██ ██  ██ ██ ▀██\n    █████▀ ▀████▀ ██  ██   ██   ██ ██  ██ ▀████▀\n    */\n    initSort: function initSort(c, cell, event) {\n      if (c.table.isUpdating) {\n        // let any updates complete before initializing a sort\n        return setTimeout(function () {\n          ts.initSort(c, cell, event);\n        }, 50);\n      }\n\n      var arry,\n          indx,\n          headerIndx,\n          dir,\n          temp,\n          tmp,\n          $header,\n          notMultiSort = !event[c.sortMultiSortKey],\n          table = c.table,\n          len = c.$headers.length,\n          th = ts.getClosest($(cell), 'th, td'),\n          col = parseInt(th.attr('data-column'), 10),\n          sortedBy = event.type === 'mouseup' ? 'user' : event.type,\n          order = c.sortVars[col].order;\n      th = th[0]; // Only call sortStart if sorting is enabled\n\n      c.$table.triggerHandler('sortStart', table); // get current column sort order\n\n      tmp = (c.sortVars[col].count + 1) % order.length;\n      c.sortVars[col].count = event[c.sortResetKey] ? 2 : tmp; // reset all sorts on non-current column - issue #30\n\n      if (c.sortRestart) {\n        for (headerIndx = 0; headerIndx < len; headerIndx++) {\n          $header = c.$headers.eq(headerIndx);\n          tmp = parseInt($header.attr('data-column'), 10); // only reset counts on columns that weren't just clicked on and if not included in a multisort\n\n          if (col !== tmp && (notMultiSort || $header.hasClass(ts.css.sortNone))) {\n            c.sortVars[tmp].count = -1;\n          }\n        }\n      } // user only wants to sort on one column\n\n\n      if (notMultiSort) {\n        $.each(c.sortVars, function (i) {\n          c.sortVars[i].sortedBy = '';\n        }); // flush the sort list\n\n        c.sortList = [];\n        c.last.sortList = [];\n\n        if (c.sortForce !== null) {\n          arry = c.sortForce;\n\n          for (indx = 0; indx < arry.length; indx++) {\n            if (arry[indx][0] !== col) {\n              c.sortList[c.sortList.length] = arry[indx];\n              c.sortVars[arry[indx][0]].sortedBy = 'sortForce';\n            }\n          }\n        } // add column to sort list\n\n\n        dir = order[c.sortVars[col].count];\n\n        if (dir < 2) {\n          c.sortList[c.sortList.length] = [col, dir];\n          c.sortVars[col].sortedBy = sortedBy; // add other columns if header spans across multiple\n\n          if (th.colSpan > 1) {\n            for (indx = 1; indx < th.colSpan; indx++) {\n              c.sortList[c.sortList.length] = [col + indx, dir]; // update count on columns in colSpan\n\n              c.sortVars[col + indx].count = $.inArray(dir, order);\n              c.sortVars[col + indx].sortedBy = sortedBy;\n            }\n          }\n        } // multi column sorting\n\n      } else {\n        // get rid of the sortAppend before adding more - fixes issue #115 & #523\n        c.sortList = $.extend([], c.last.sortList); // the user has clicked on an already sorted column\n\n        if (ts.isValueInArray(col, c.sortList) >= 0) {\n          // reverse the sorting direction\n          c.sortVars[col].sortedBy = sortedBy;\n\n          for (indx = 0; indx < c.sortList.length; indx++) {\n            tmp = c.sortList[indx];\n\n            if (tmp[0] === col) {\n              // order.count seems to be incorrect when compared to cell.count\n              tmp[1] = order[c.sortVars[col].count];\n\n              if (tmp[1] === 2) {\n                c.sortList.splice(indx, 1);\n                c.sortVars[col].count = -1;\n              }\n            }\n          }\n        } else {\n          // add column to sort list array\n          dir = order[c.sortVars[col].count];\n          c.sortVars[col].sortedBy = sortedBy;\n\n          if (dir < 2) {\n            c.sortList[c.sortList.length] = [col, dir]; // add other columns if header spans across multiple\n\n            if (th.colSpan > 1) {\n              for (indx = 1; indx < th.colSpan; indx++) {\n                c.sortList[c.sortList.length] = [col + indx, dir]; // update count on columns in colSpan\n\n                c.sortVars[col + indx].count = $.inArray(dir, order);\n                c.sortVars[col + indx].sortedBy = sortedBy;\n              }\n            }\n          }\n        }\n      } // save sort before applying sortAppend\n\n\n      c.last.sortList = $.extend([], c.sortList);\n\n      if (c.sortList.length && c.sortAppend) {\n        arry = $.isArray(c.sortAppend) ? c.sortAppend : c.sortAppend[c.sortList[0][0]];\n\n        if (!ts.isEmptyObject(arry)) {\n          for (indx = 0; indx < arry.length; indx++) {\n            if (arry[indx][0] !== col && ts.isValueInArray(arry[indx][0], c.sortList) < 0) {\n              dir = arry[indx][1];\n              temp = ('' + dir).match(/^(a|d|s|o|n)/);\n\n              if (temp) {\n                tmp = c.sortList[0][1];\n\n                switch (temp[0]) {\n                  case 'd':\n                    dir = 1;\n                    break;\n\n                  case 's':\n                    dir = tmp;\n                    break;\n\n                  case 'o':\n                    dir = tmp === 0 ? 1 : 0;\n                    break;\n\n                  case 'n':\n                    dir = (tmp + 1) % order.length;\n                    break;\n\n                  default:\n                    dir = 0;\n                    break;\n                }\n              }\n\n              c.sortList[c.sortList.length] = [arry[indx][0], dir];\n              c.sortVars[arry[indx][0]].sortedBy = 'sortAppend';\n            }\n          }\n        }\n      } // sortBegin event triggered immediately before the sort\n\n\n      c.$table.triggerHandler('sortBegin', table); // setTimeout needed so the processing icon shows up\n\n      setTimeout(function () {\n        // set css for headers\n        ts.setHeadersCss(c);\n        ts.multisort(c);\n        ts.appendCache(c);\n        c.$table.triggerHandler('sortBeforeEnd', table);\n        c.$table.triggerHandler('sortEnd', table);\n      }, 1);\n    },\n    // sort multiple columns\n    multisort: function multisort(c) {\n      /*jshint loopfunc:true */\n      var tbodyIndex,\n          sortTime,\n          colMax,\n          rows,\n          tmp,\n          table = c.table,\n          sorter = [],\n          dir = 0,\n          textSorter = c.textSorter || '',\n          sortList = c.sortList,\n          sortLen = sortList.length,\n          len = c.$tbodies.length;\n\n      if (c.serverSideSorting || ts.isEmptyObject(c.cache)) {\n        // empty table - fixes #206/#346\n        return;\n      }\n\n      if (ts.debug(c, 'core')) {\n        sortTime = new Date();\n      } // cache textSorter to optimize speed\n\n\n      if (_typeof(textSorter) === 'object') {\n        colMax = c.columns;\n\n        while (colMax--) {\n          tmp = ts.getColumnData(table, textSorter, colMax);\n\n          if (typeof tmp === 'function') {\n            sorter[colMax] = tmp;\n          }\n        }\n      }\n\n      for (tbodyIndex = 0; tbodyIndex < len; tbodyIndex++) {\n        colMax = c.cache[tbodyIndex].colMax;\n        rows = c.cache[tbodyIndex].normalized;\n        rows.sort(function (a, b) {\n          var sortIndex, num, col, order, sort, x, y; // rows is undefined here in IE, so don't use it!\n\n          for (sortIndex = 0; sortIndex < sortLen; sortIndex++) {\n            col = sortList[sortIndex][0];\n            order = sortList[sortIndex][1]; // sort direction, true = asc, false = desc\n\n            dir = order === 0;\n\n            if (c.sortStable && a[col] === b[col] && sortLen === 1) {\n              return a[c.columns].order - b[c.columns].order;\n            } // fallback to natural sort since it is more robust\n\n\n            num = /n/i.test(ts.getSortType(c.parsers, col));\n\n            if (num && c.strings[col]) {\n              // sort strings in numerical columns\n              if (typeof ts.string[c.strings[col]] === 'boolean') {\n                num = (dir ? 1 : -1) * (ts.string[c.strings[col]] ? -1 : 1);\n              } else {\n                num = c.strings[col] ? ts.string[c.strings[col]] || 0 : 0;\n              } // fall back to built-in numeric sort\n              // var sort = $.tablesorter['sort' + s]( a[col], b[col], dir, colMax[col], table );\n\n\n              sort = c.numberSorter ? c.numberSorter(a[col], b[col], dir, colMax[col], table) : ts['sortNumeric' + (dir ? 'Asc' : 'Desc')](a[col], b[col], num, colMax[col], col, c);\n            } else {\n              // set a & b depending on sort direction\n              x = dir ? a : b;\n              y = dir ? b : a; // text sort function\n\n              if (typeof textSorter === 'function') {\n                // custom OVERALL text sorter\n                sort = textSorter(x[col], y[col], dir, col, table);\n              } else if (typeof sorter[col] === 'function') {\n                // custom text sorter for a SPECIFIC COLUMN\n                sort = sorter[col](x[col], y[col], dir, col, table);\n              } else {\n                // fall back to natural sort\n                sort = ts['sortNatural' + (dir ? 'Asc' : 'Desc')](a[col] || '', b[col] || '', col, c);\n              }\n            }\n\n            if (sort) {\n              return sort;\n            }\n          }\n\n          return a[c.columns].order - b[c.columns].order;\n        });\n      }\n\n      if (ts.debug(c, 'core')) {\n        console.log('Applying sort ' + sortList.toString() + ts.benchmark(sortTime));\n      }\n    },\n    resortComplete: function resortComplete(c, callback) {\n      if (c.table.isUpdating) {\n        c.$table.triggerHandler('updateComplete', c.table);\n      }\n\n      if ($.isFunction(callback)) {\n        callback(c.table);\n      }\n    },\n    checkResort: function checkResort(c, resort, callback) {\n      var sortList = $.isArray(resort) ? resort : c.sortList,\n          // if no resort parameter is passed, fallback to config.resort (true by default)\n      resrt = typeof resort === 'undefined' ? c.resort : resort; // don't try to resort if the table is still processing\n      // this will catch spamming of the updateCell method\n\n      if (resrt !== false && !c.serverSideSorting && !c.table.isProcessing) {\n        if (sortList.length) {\n          ts.sortOn(c, sortList, function () {\n            ts.resortComplete(c, callback);\n          }, true);\n        } else {\n          ts.sortReset(c, function () {\n            ts.resortComplete(c, callback);\n            ts.applyWidget(c.table, false);\n          });\n        }\n      } else {\n        ts.resortComplete(c, callback);\n        ts.applyWidget(c.table, false);\n      }\n    },\n    sortOn: function sortOn(c, list, callback, init) {\n      var indx,\n          table = c.table;\n      c.$table.triggerHandler('sortStart', table);\n\n      for (indx = 0; indx < c.columns; indx++) {\n        c.sortVars[indx].sortedBy = ts.isValueInArray(indx, list) > -1 ? 'sorton' : '';\n      } // update header count index\n\n\n      ts.updateHeaderSortCount(c, list); // set css for headers\n\n      ts.setHeadersCss(c); // fixes #346\n\n      if (c.delayInit && ts.isEmptyObject(c.cache)) {\n        ts.buildCache(c);\n      }\n\n      c.$table.triggerHandler('sortBegin', table); // sort the table and append it to the dom\n\n      ts.multisort(c);\n      ts.appendCache(c, init);\n      c.$table.triggerHandler('sortBeforeEnd', table);\n      c.$table.triggerHandler('sortEnd', table);\n      ts.applyWidget(table);\n\n      if ($.isFunction(callback)) {\n        callback(table);\n      }\n    },\n    sortReset: function sortReset(c, callback) {\n      c.sortList = [];\n      var indx;\n\n      for (indx = 0; indx < c.columns; indx++) {\n        c.sortVars[indx].count = -1;\n        c.sortVars[indx].sortedBy = '';\n      }\n\n      ts.setHeadersCss(c);\n      ts.multisort(c);\n      ts.appendCache(c);\n\n      if ($.isFunction(callback)) {\n        callback(c.table);\n      }\n    },\n    getSortType: function getSortType(parsers, column) {\n      return parsers && parsers[column] ? parsers[column].type || '' : '';\n    },\n    getOrder: function getOrder(val) {\n      // look for 'd' in 'desc' order; return true\n      return /^d/i.test(val) || val === 1;\n    },\n    // Natural sort - https://github.com/overset/javascript-natural-sort (date sorting removed)\n    sortNatural: function sortNatural(a, b) {\n      if (a === b) {\n        return 0;\n      }\n\n      a = (a || '').toString();\n      b = (b || '').toString();\n      var aNum,\n          bNum,\n          aFloat,\n          bFloat,\n          indx,\n          max,\n          regex = ts.regex; // first try and sort Hex codes\n\n      if (regex.hex.test(b)) {\n        aNum = parseInt(a.match(regex.hex), 16);\n        bNum = parseInt(b.match(regex.hex), 16);\n\n        if (aNum < bNum) {\n          return -1;\n        }\n\n        if (aNum > bNum) {\n          return 1;\n        }\n      } // chunk/tokenize\n\n\n      aNum = a.replace(regex.chunk, '\\\\0$1\\\\0').replace(regex.chunks, '').split('\\\\0');\n      bNum = b.replace(regex.chunk, '\\\\0$1\\\\0').replace(regex.chunks, '').split('\\\\0');\n      max = Math.max(aNum.length, bNum.length); // natural sorting through split numeric strings and default strings\n\n      for (indx = 0; indx < max; indx++) {\n        // find floats not starting with '0', string or 0 if not defined\n        aFloat = isNaN(aNum[indx]) ? aNum[indx] || 0 : parseFloat(aNum[indx]) || 0;\n        bFloat = isNaN(bNum[indx]) ? bNum[indx] || 0 : parseFloat(bNum[indx]) || 0; // handle numeric vs string comparison - number < string - (Kyle Adams)\n\n        if (isNaN(aFloat) !== isNaN(bFloat)) {\n          return isNaN(aFloat) ? 1 : -1;\n        } // rely on string comparison if different types - i.e. '02' < 2 != '02' < '2'\n\n\n        if (_typeof(aFloat) !== _typeof(bFloat)) {\n          aFloat += '';\n          bFloat += '';\n        }\n\n        if (aFloat < bFloat) {\n          return -1;\n        }\n\n        if (aFloat > bFloat) {\n          return 1;\n        }\n      }\n\n      return 0;\n    },\n    sortNaturalAsc: function sortNaturalAsc(a, b, col, c) {\n      if (a === b) {\n        return 0;\n      }\n\n      var empty = ts.string[c.empties[col] || c.emptyTo];\n\n      if (a === '' && empty !== 0) {\n        return typeof empty === 'boolean' ? empty ? -1 : 1 : -empty || -1;\n      }\n\n      if (b === '' && empty !== 0) {\n        return typeof empty === 'boolean' ? empty ? 1 : -1 : empty || 1;\n      }\n\n      return ts.sortNatural(a, b);\n    },\n    sortNaturalDesc: function sortNaturalDesc(a, b, col, c) {\n      if (a === b) {\n        return 0;\n      }\n\n      var empty = ts.string[c.empties[col] || c.emptyTo];\n\n      if (a === '' && empty !== 0) {\n        return typeof empty === 'boolean' ? empty ? -1 : 1 : empty || 1;\n      }\n\n      if (b === '' && empty !== 0) {\n        return typeof empty === 'boolean' ? empty ? 1 : -1 : -empty || -1;\n      }\n\n      return ts.sortNatural(b, a);\n    },\n    // basic alphabetical sort\n    sortText: function sortText(a, b) {\n      return a > b ? 1 : a < b ? -1 : 0;\n    },\n    // return text string value by adding up ascii value\n    // so the text is somewhat sorted when using a digital sort\n    // this is NOT an alphanumeric sort\n    getTextValue: function getTextValue(val, num, max) {\n      if (max) {\n        // make sure the text value is greater than the max numerical value (max)\n        var indx,\n            len = val ? val.length : 0,\n            n = max + num;\n\n        for (indx = 0; indx < len; indx++) {\n          n += val.charCodeAt(indx);\n        }\n\n        return num * n;\n      }\n\n      return 0;\n    },\n    sortNumericAsc: function sortNumericAsc(a, b, num, max, col, c) {\n      if (a === b) {\n        return 0;\n      }\n\n      var empty = ts.string[c.empties[col] || c.emptyTo];\n\n      if (a === '' && empty !== 0) {\n        return typeof empty === 'boolean' ? empty ? -1 : 1 : -empty || -1;\n      }\n\n      if (b === '' && empty !== 0) {\n        return typeof empty === 'boolean' ? empty ? 1 : -1 : empty || 1;\n      }\n\n      if (isNaN(a)) {\n        a = ts.getTextValue(a, num, max);\n      }\n\n      if (isNaN(b)) {\n        b = ts.getTextValue(b, num, max);\n      }\n\n      return a - b;\n    },\n    sortNumericDesc: function sortNumericDesc(a, b, num, max, col, c) {\n      if (a === b) {\n        return 0;\n      }\n\n      var empty = ts.string[c.empties[col] || c.emptyTo];\n\n      if (a === '' && empty !== 0) {\n        return typeof empty === 'boolean' ? empty ? -1 : 1 : empty || 1;\n      }\n\n      if (b === '' && empty !== 0) {\n        return typeof empty === 'boolean' ? empty ? 1 : -1 : -empty || -1;\n      }\n\n      if (isNaN(a)) {\n        a = ts.getTextValue(a, num, max);\n      }\n\n      if (isNaN(b)) {\n        b = ts.getTextValue(b, num, max);\n      }\n\n      return b - a;\n    },\n    sortNumeric: function sortNumeric(a, b) {\n      return a - b;\n    },\n\n    /*\n    ██ ██ ██ ██ █████▄ ▄████▄ ██████ ██████ ▄█████\n    ██ ██ ██ ██ ██  ██ ██ ▄▄▄ ██▄▄     ██   ▀█▄\n    ██ ██ ██ ██ ██  ██ ██ ▀██ ██▀▀     ██      ▀█▄\n    ███████▀ ██ █████▀ ▀████▀ ██████   ██   █████▀\n    */\n    addWidget: function addWidget(widget) {\n      if (widget.id && !ts.isEmptyObject(ts.getWidgetById(widget.id))) {\n        console.warn('\"' + widget.id + '\" widget was loaded more than once!');\n      }\n\n      ts.widgets[ts.widgets.length] = widget;\n    },\n    hasWidget: function hasWidget($table, name) {\n      $table = $($table);\n      return $table.length && $table[0].config && $table[0].config.widgetInit[name] || false;\n    },\n    getWidgetById: function getWidgetById(name) {\n      var indx,\n          widget,\n          len = ts.widgets.length;\n\n      for (indx = 0; indx < len; indx++) {\n        widget = ts.widgets[indx];\n\n        if (widget && widget.id && widget.id.toLowerCase() === name.toLowerCase()) {\n          return widget;\n        }\n      }\n    },\n    applyWidgetOptions: function applyWidgetOptions(table) {\n      var indx,\n          widget,\n          wo,\n          c = table.config,\n          len = c.widgets.length;\n\n      if (len) {\n        for (indx = 0; indx < len; indx++) {\n          widget = ts.getWidgetById(c.widgets[indx]);\n\n          if (widget && widget.options) {\n            wo = $.extend(true, {}, widget.options);\n            c.widgetOptions = $.extend(true, wo, c.widgetOptions); // add widgetOptions to defaults for option validator\n\n            $.extend(true, ts.defaults.widgetOptions, widget.options);\n          }\n        }\n      }\n    },\n    addWidgetFromClass: function addWidgetFromClass(table) {\n      var len,\n          indx,\n          c = table.config,\n          // look for widgets to apply from table class\n      // don't match from 'ui-widget-content'; use \\S instead of \\w to include widgets\n      // with dashes in the name, e.g. \"widget-test-2\" extracts out \"test-2\"\n      regex = '^' + c.widgetClass.replace(ts.regex.templateName, '(\\\\S+)+') + '$',\n          widgetClass = new RegExp(regex, 'g'),\n          // split up table class (widget id's can include dashes) - stop using match\n      // otherwise only one widget gets extracted, see #1109\n      widgets = (table.className || '').split(ts.regex.spaces);\n\n      if (widgets.length) {\n        len = widgets.length;\n\n        for (indx = 0; indx < len; indx++) {\n          if (widgets[indx].match(widgetClass)) {\n            c.widgets[c.widgets.length] = widgets[indx].replace(widgetClass, '$1');\n          }\n        }\n      }\n    },\n    applyWidgetId: function applyWidgetId(table, id, init) {\n      table = $(table)[0];\n      var applied,\n          time,\n          name,\n          c = table.config,\n          wo = c.widgetOptions,\n          debug = ts.debug(c, 'core'),\n          widget = ts.getWidgetById(id);\n\n      if (widget) {\n        name = widget.id;\n        applied = false; // add widget name to option list so it gets reapplied after sorting, filtering, etc\n\n        if ($.inArray(name, c.widgets) < 0) {\n          c.widgets[c.widgets.length] = name;\n        }\n\n        if (debug) {\n          time = new Date();\n        }\n\n        if (init || !c.widgetInit[name]) {\n          // set init flag first to prevent calling init more than once (e.g. pager)\n          c.widgetInit[name] = true;\n\n          if (table.hasInitialized) {\n            // don't reapply widget options on tablesorter init\n            ts.applyWidgetOptions(table);\n          }\n\n          if (typeof widget.init === 'function') {\n            applied = true;\n\n            if (debug) {\n              console[console.group ? 'group' : 'log']('Initializing ' + name + ' widget');\n            }\n\n            widget.init(table, widget, c, wo);\n          }\n        }\n\n        if (!init && typeof widget.format === 'function') {\n          applied = true;\n\n          if (debug) {\n            console[console.group ? 'group' : 'log']('Updating ' + name + ' widget');\n          }\n\n          widget.format(table, c, wo, false);\n        }\n\n        if (debug) {\n          if (applied) {\n            console.log('Completed ' + (init ? 'initializing ' : 'applying ') + name + ' widget' + ts.benchmark(time));\n\n            if (console.groupEnd) {\n              console.groupEnd();\n            }\n          }\n        }\n      }\n    },\n    applyWidget: function applyWidget(table, init, callback) {\n      table = $(table)[0]; // in case this is called externally\n\n      var indx,\n          len,\n          names,\n          widget,\n          time,\n          c = table.config,\n          debug = ts.debug(c, 'core'),\n          widgets = []; // prevent numerous consecutive widget applications\n\n      if (init !== false && table.hasInitialized && (table.isApplyingWidgets || table.isUpdating)) {\n        return;\n      }\n\n      if (debug) {\n        time = new Date();\n      }\n\n      ts.addWidgetFromClass(table); // prevent \"tablesorter-ready\" from firing multiple times in a row\n\n      clearTimeout(c.timerReady);\n\n      if (c.widgets.length) {\n        table.isApplyingWidgets = true; // ensure unique widget ids\n\n        c.widgets = $.grep(c.widgets, function (val, index) {\n          return $.inArray(val, c.widgets) === index;\n        });\n        names = c.widgets || [];\n        len = names.length; // build widget array & add priority as needed\n\n        for (indx = 0; indx < len; indx++) {\n          widget = ts.getWidgetById(names[indx]);\n\n          if (widget && widget.id) {\n            // set priority to 10 if not defined\n            if (!widget.priority) {\n              widget.priority = 10;\n            }\n\n            widgets[indx] = widget;\n          } else if (debug) {\n            console.warn('\"' + names[indx] + '\" was enabled, but the widget code has not been loaded!');\n          }\n        } // sort widgets by priority\n\n\n        widgets.sort(function (a, b) {\n          return a.priority < b.priority ? -1 : a.priority === b.priority ? 0 : 1;\n        }); // add/update selected widgets\n\n        len = widgets.length;\n\n        if (debug) {\n          console[console.group ? 'group' : 'log']('Start ' + (init ? 'initializing' : 'applying') + ' widgets');\n        }\n\n        for (indx = 0; indx < len; indx++) {\n          widget = widgets[indx];\n\n          if (widget && widget.id) {\n            ts.applyWidgetId(table, widget.id, init);\n          }\n        }\n\n        if (debug && console.groupEnd) {\n          console.groupEnd();\n        }\n      }\n\n      c.timerReady = setTimeout(function () {\n        table.isApplyingWidgets = false;\n        $.data(table, 'lastWidgetApplication', new Date());\n        c.$table.triggerHandler('tablesorter-ready'); // callback executed on init only\n\n        if (!init && typeof callback === 'function') {\n          callback(table);\n        }\n\n        if (debug) {\n          widget = c.widgets.length;\n          console.log('Completed ' + (init === true ? 'initializing ' : 'applying ') + widget + ' widget' + (widget !== 1 ? 's' : '') + ts.benchmark(time));\n        }\n      }, 10);\n    },\n    removeWidget: function removeWidget(table, name, refreshing) {\n      table = $(table)[0];\n      var index,\n          widget,\n          indx,\n          len,\n          c = table.config; // if name === true, add all widgets from $.tablesorter.widgets\n\n      if (name === true) {\n        name = [];\n        len = ts.widgets.length;\n\n        for (indx = 0; indx < len; indx++) {\n          widget = ts.widgets[indx];\n\n          if (widget && widget.id) {\n            name[name.length] = widget.id;\n          }\n        }\n      } else {\n        // name can be either an array of widgets names,\n        // or a space/comma separated list of widget names\n        name = ($.isArray(name) ? name.join(',') : name || '').toLowerCase().split(/[\\s,]+/);\n      }\n\n      len = name.length;\n\n      for (index = 0; index < len; index++) {\n        widget = ts.getWidgetById(name[index]);\n        indx = $.inArray(name[index], c.widgets); // don't remove the widget from config.widget if refreshing\n\n        if (indx >= 0 && refreshing !== true) {\n          c.widgets.splice(indx, 1);\n        }\n\n        if (widget && widget.remove) {\n          if (ts.debug(c, 'core')) {\n            console.log((refreshing ? 'Refreshing' : 'Removing') + ' \"' + name[index] + '\" widget');\n          }\n\n          widget.remove(table, c, c.widgetOptions, refreshing);\n          c.widgetInit[name[index]] = false;\n        }\n      }\n\n      c.$table.triggerHandler('widgetRemoveEnd', table);\n    },\n    refreshWidgets: function refreshWidgets(table, doAll, dontapply) {\n      table = $(table)[0]; // see issue #243\n\n      var indx,\n          widget,\n          c = table.config,\n          curWidgets = c.widgets,\n          widgets = ts.widgets,\n          len = widgets.length,\n          list = [],\n          callback = function callback(table) {\n        $(table).triggerHandler('refreshComplete');\n      }; // remove widgets not defined in config.widgets, unless doAll is true\n\n\n      for (indx = 0; indx < len; indx++) {\n        widget = widgets[indx];\n\n        if (widget && widget.id && (doAll || $.inArray(widget.id, curWidgets) < 0)) {\n          list[list.length] = widget.id;\n        }\n      }\n\n      ts.removeWidget(table, list.join(','), true);\n\n      if (dontapply !== true) {\n        // call widget init if\n        ts.applyWidget(table, doAll || false, callback);\n\n        if (doAll) {\n          // apply widget format\n          ts.applyWidget(table, false, callback);\n        }\n      } else {\n        callback(table);\n      }\n    },\n\n    /*\n    ██  ██ ██████ ██ ██     ██ ██████ ██ ██████ ▄█████\n    ██  ██   ██   ██ ██     ██   ██   ██ ██▄▄   ▀█▄\n    ██  ██   ██   ██ ██     ██   ██   ██ ██▀▀      ▀█▄\n    ▀████▀   ██   ██ ██████ ██   ██   ██ ██████ █████▀\n    */\n    benchmark: function benchmark(diff) {\n      return ' (' + (new Date().getTime() - diff.getTime()) + ' ms)';\n    },\n    // deprecated ts.log\n    log: function log() {\n      console.log(arguments);\n    },\n    debug: function debug(c, name) {\n      return c && (c.debug === true || typeof c.debug === 'string' && c.debug.indexOf(name) > -1);\n    },\n    // $.isEmptyObject from jQuery v1.4\n    isEmptyObject: function isEmptyObject(obj) {\n      /*jshint forin: false */\n      for (var name in obj) {\n        return false;\n      }\n\n      return true;\n    },\n    isValueInArray: function isValueInArray(column, arry) {\n      var indx,\n          len = arry && arry.length || 0;\n\n      for (indx = 0; indx < len; indx++) {\n        if (arry[indx][0] === column) {\n          return indx;\n        }\n      }\n\n      return -1;\n    },\n    formatFloat: function formatFloat(str, table) {\n      if (typeof str !== 'string' || str === '') {\n        return str;\n      } // allow using formatFloat without a table; defaults to US number format\n\n\n      var num,\n          usFormat = table && table.config ? table.config.usNumberFormat !== false : typeof table !== 'undefined' ? table : true;\n\n      if (usFormat) {\n        // US Format - 1,234,567.89 -> 1234567.89\n        str = str.replace(ts.regex.comma, '');\n      } else {\n        // German Format = 1.234.567,89 -> 1234567.89\n        // French Format = 1 234 567,89 -> 1234567.89\n        str = str.replace(ts.regex.digitNonUS, '').replace(ts.regex.comma, '.');\n      }\n\n      if (ts.regex.digitNegativeTest.test(str)) {\n        // make (#) into a negative number -> (10) = -10\n        str = str.replace(ts.regex.digitNegativeReplace, '-$1');\n      }\n\n      num = parseFloat(str); // return the text instead of zero\n\n      return isNaN(num) ? $.trim(str) : num;\n    },\n    isDigit: function isDigit(str) {\n      // replace all unwanted chars and match\n      return isNaN(str) ? ts.regex.digitTest.test(str.toString().replace(ts.regex.digitReplace, '')) : str !== '';\n    },\n    // computeTableHeaderCellIndexes from:\n    // http://www.javascripttoolbox.com/lib/table/examples.php\n    // http://www.javascripttoolbox.com/temp/table_cellindex.html\n    computeColumnIndex: function computeColumnIndex($rows, c) {\n      var i,\n          j,\n          k,\n          l,\n          cell,\n          cells,\n          rowIndex,\n          rowSpan,\n          colSpan,\n          firstAvailCol,\n          // total columns has been calculated, use it to set the matrixrow\n      columns = c && c.columns || 0,\n          matrix = [],\n          matrixrow = new Array(columns);\n\n      for (i = 0; i < $rows.length; i++) {\n        cells = $rows[i].cells;\n\n        for (j = 0; j < cells.length; j++) {\n          cell = cells[j];\n          rowIndex = i;\n          rowSpan = cell.rowSpan || 1;\n          colSpan = cell.colSpan || 1;\n\n          if (typeof matrix[rowIndex] === 'undefined') {\n            matrix[rowIndex] = [];\n          } // Find first available column in the first row\n\n\n          for (k = 0; k < matrix[rowIndex].length + 1; k++) {\n            if (typeof matrix[rowIndex][k] === 'undefined') {\n              firstAvailCol = k;\n              break;\n            }\n          } // jscs:disable disallowEmptyBlocks\n\n\n          if (columns && cell.cellIndex === firstAvailCol) {// don't to anything\n          } else if (cell.setAttribute) {\n            // jscs:enable disallowEmptyBlocks\n            // add data-column (setAttribute = IE8+)\n            cell.setAttribute('data-column', firstAvailCol);\n          } else {\n            // remove once we drop support for IE7 - 1/12/2016\n            $(cell).attr('data-column', firstAvailCol);\n          }\n\n          for (k = rowIndex; k < rowIndex + rowSpan; k++) {\n            if (typeof matrix[k] === 'undefined') {\n              matrix[k] = [];\n            }\n\n            matrixrow = matrix[k];\n\n            for (l = firstAvailCol; l < firstAvailCol + colSpan; l++) {\n              matrixrow[l] = 'x';\n            }\n          }\n        }\n      }\n\n      ts.checkColumnCount($rows, matrix, matrixrow.length);\n      return matrixrow.length;\n    },\n    checkColumnCount: function checkColumnCount($rows, matrix, columns) {\n      // this DOES NOT report any tbody column issues, except for the math and\n      // and column selector widgets\n      var i,\n          len,\n          valid = true,\n          cells = [];\n\n      for (i = 0; i < matrix.length; i++) {\n        // some matrix entries are undefined when testing the footer because\n        // it is using the rowIndex property\n        if (matrix[i]) {\n          len = matrix[i].length;\n\n          if (matrix[i].length !== columns) {\n            valid = false;\n            break;\n          }\n        }\n      }\n\n      if (!valid) {\n        $rows.each(function (indx, el) {\n          var cell = el.parentElement.nodeName;\n\n          if (cells.indexOf(cell) < 0) {\n            cells.push(cell);\n          }\n        });\n        console.error('Invalid or incorrect number of columns in the ' + cells.join(' or ') + '; expected ' + columns + ', but found ' + len + ' columns');\n      }\n    },\n    // automatically add a colgroup with col elements set to a percentage width\n    fixColumnWidth: function fixColumnWidth(table) {\n      table = $(table)[0];\n      var overallWidth,\n          percent,\n          $tbodies,\n          len,\n          index,\n          c = table.config,\n          $colgroup = c.$table.children('colgroup'); // remove plugin-added colgroup, in case we need to refresh the widths\n\n      if ($colgroup.length && $colgroup.hasClass(ts.css.colgroup)) {\n        $colgroup.remove();\n      }\n\n      if (c.widthFixed && c.$table.children('colgroup').length === 0) {\n        $colgroup = $('<colgroup class=\"' + ts.css.colgroup + '\">');\n        overallWidth = c.$table.width(); // only add col for visible columns - fixes #371\n\n        $tbodies = c.$tbodies.find('tr:first').children(':visible');\n        len = $tbodies.length;\n\n        for (index = 0; index < len; index++) {\n          percent = parseInt($tbodies.eq(index).width() / overallWidth * 1000, 10) / 10 + '%';\n          $colgroup.append($('<col>').css('width', percent));\n        }\n\n        c.$table.prepend($colgroup);\n      }\n    },\n    // get sorter, string, empty, etc options for each column from\n    // jQuery data, metadata, header option or header class name ('sorter-false')\n    // priority = jQuery data > meta > headers option > header class name\n    getData: function getData(header, configHeader, key) {\n      var meta,\n          cl4ss,\n          val = '',\n          $header = $(header);\n\n      if (!$header.length) {\n        return '';\n      }\n\n      meta = $.metadata ? $header.metadata() : false;\n      cl4ss = ' ' + ($header.attr('class') || '');\n\n      if (typeof $header.data(key) !== 'undefined' || typeof $header.data(key.toLowerCase()) !== 'undefined') {\n        // 'data-lockedOrder' is assigned to 'lockedorder'; but 'data-locked-order' is assigned to 'lockedOrder'\n        // 'data-sort-initial-order' is assigned to 'sortInitialOrder'\n        val += $header.data(key) || $header.data(key.toLowerCase());\n      } else if (meta && typeof meta[key] !== 'undefined') {\n        val += meta[key];\n      } else if (configHeader && typeof configHeader[key] !== 'undefined') {\n        val += configHeader[key];\n      } else if (cl4ss !== ' ' && cl4ss.match(' ' + key + '-')) {\n        // include sorter class name 'sorter-text', etc; now works with 'sorter-my-custom-parser'\n        val = cl4ss.match(new RegExp('\\\\s' + key + '-([\\\\w-]+)'))[1] || '';\n      }\n\n      return $.trim(val);\n    },\n    getColumnData: function getColumnData(table, obj, indx, getCell, $headers) {\n      if (_typeof(obj) !== 'object' || obj === null) {\n        return obj;\n      }\n\n      table = $(table)[0];\n      var $header,\n          key,\n          c = table.config,\n          $cells = $headers || c.$headers,\n          // c.$headerIndexed is not defined initially\n      $cell = c.$headerIndexed && c.$headerIndexed[indx] || $cells.find('[data-column=\"' + indx + '\"]:last');\n\n      if (typeof obj[indx] !== 'undefined') {\n        return getCell ? obj[indx] : obj[$cells.index($cell)];\n      }\n\n      for (key in obj) {\n        if (typeof key === 'string') {\n          $header = $cell // header cell with class/id\n          .filter(key) // find elements within the header cell with cell/id\n          .add($cell.find(key));\n\n          if ($header.length) {\n            return obj[key];\n          }\n        }\n      }\n\n      return;\n    },\n    // *** Process table ***\n    // add processing indicator\n    isProcessing: function isProcessing($table, toggle, $headers) {\n      $table = $($table);\n      var c = $table[0].config,\n          // default to all headers\n      $header = $headers || $table.find('.' + ts.css.header);\n\n      if (toggle) {\n        // don't use sortList if custom $headers used\n        if (typeof $headers !== 'undefined' && c.sortList.length > 0) {\n          // get headers from the sortList\n          $header = $header.filter(function () {\n            // get data-column from attr to keep compatibility with jQuery 1.2.6\n            return this.sortDisabled ? false : ts.isValueInArray(parseFloat($(this).attr('data-column')), c.sortList) >= 0;\n          });\n        }\n\n        $table.add($header).addClass(ts.css.processing + ' ' + c.cssProcessing);\n      } else {\n        $table.add($header).removeClass(ts.css.processing + ' ' + c.cssProcessing);\n      }\n    },\n    // detach tbody but save the position\n    // don't use tbody because there are portions that look for a tbody index (updateCell)\n    processTbody: function processTbody(table, $tb, getIt) {\n      table = $(table)[0];\n\n      if (getIt) {\n        table.isProcessing = true;\n        $tb.before('<colgroup class=\"tablesorter-savemyplace\"/>');\n        return $.fn.detach ? $tb.detach() : $tb.remove();\n      }\n\n      var holdr = $(table).find('colgroup.tablesorter-savemyplace');\n      $tb.insertAfter(holdr);\n      holdr.remove();\n      table.isProcessing = false;\n    },\n    clearTableBody: function clearTableBody(table) {\n      $(table)[0].config.$tbodies.children().detach();\n    },\n    // used when replacing accented characters during sorting\n    characterEquivalents: {\n      'a': \"\\xE1\\xE0\\xE2\\xE3\\xE4\\u0105\\xE5\",\n      // áàâãäąå\n      'A': \"\\xC1\\xC0\\xC2\\xC3\\xC4\\u0104\\xC5\",\n      // ÁÀÂÃÄĄÅ\n      'c': \"\\xE7\\u0107\\u010D\",\n      // çćč\n      'C': \"\\xC7\\u0106\\u010C\",\n      // ÇĆČ\n      'e': \"\\xE9\\xE8\\xEA\\xEB\\u011B\\u0119\",\n      // éèêëěę\n      'E': \"\\xC9\\xC8\\xCA\\xCB\\u011A\\u0118\",\n      // ÉÈÊËĚĘ\n      'i': \"\\xED\\xEC\\u0130\\xEE\\xEF\\u0131\",\n      // íìİîïı\n      'I': \"\\xCD\\xCC\\u0130\\xCE\\xCF\",\n      // ÍÌİÎÏ\n      'o': \"\\xF3\\xF2\\xF4\\xF5\\xF6\\u014D\",\n      // óòôõöō\n      'O': \"\\xD3\\xD2\\xD4\\xD5\\xD6\\u014C\",\n      // ÓÒÔÕÖŌ\n      'ss': \"\\xDF\",\n      // ß (s sharp)\n      'SS': \"\\u1E9E\",\n      // ẞ (Capital sharp s)\n      'u': \"\\xFA\\xF9\\xFB\\xFC\\u016F\",\n      // úùûüů\n      'U': \"\\xDA\\xD9\\xDB\\xDC\\u016E\" // ÚÙÛÜŮ\n\n    },\n    replaceAccents: function replaceAccents(str) {\n      var chr,\n          acc = '[',\n          eq = ts.characterEquivalents;\n\n      if (!ts.characterRegex) {\n        ts.characterRegexArray = {};\n\n        for (chr in eq) {\n          if (typeof chr === 'string') {\n            acc += eq[chr];\n            ts.characterRegexArray[chr] = new RegExp('[' + eq[chr] + ']', 'g');\n          }\n        }\n\n        ts.characterRegex = new RegExp(acc + ']');\n      }\n\n      if (ts.characterRegex.test(str)) {\n        for (chr in eq) {\n          if (typeof chr === 'string') {\n            str = str.replace(ts.characterRegexArray[chr], chr);\n          }\n        }\n      }\n\n      return str;\n    },\n    validateOptions: function validateOptions(c) {\n      var setting,\n          setting2,\n          typ,\n          timer,\n          // ignore options containing an array\n      ignore = 'headers sortForce sortList sortAppend widgets'.split(' '),\n          orig = c.originalSettings;\n\n      if (orig) {\n        if (ts.debug(c, 'core')) {\n          timer = new Date();\n        }\n\n        for (setting in orig) {\n          typ = _typeof(ts.defaults[setting]);\n\n          if (typ === 'undefined') {\n            console.warn('Tablesorter Warning! \"table.config.' + setting + '\" option not recognized');\n          } else if (typ === 'object') {\n            for (setting2 in orig[setting]) {\n              typ = ts.defaults[setting] && _typeof(ts.defaults[setting][setting2]);\n\n              if ($.inArray(setting, ignore) < 0 && typ === 'undefined') {\n                console.warn('Tablesorter Warning! \"table.config.' + setting + '.' + setting2 + '\" option not recognized');\n              }\n            }\n          }\n        }\n\n        if (ts.debug(c, 'core')) {\n          console.log('validate options time:' + ts.benchmark(timer));\n        }\n      }\n    },\n    // restore headers\n    restoreHeaders: function restoreHeaders(table) {\n      var index,\n          $cell,\n          c = $(table)[0].config,\n          $headers = c.$table.find(c.selectorHeaders),\n          len = $headers.length; // don't use c.$headers here in case header cells were swapped\n\n      for (index = 0; index < len; index++) {\n        $cell = $headers.eq(index); // only restore header cells if it is wrapped\n        // because this is also used by the updateAll method\n\n        if ($cell.find('.' + ts.css.headerIn).length) {\n          $cell.html(c.headerContent[index]);\n        }\n      }\n    },\n    destroy: function destroy(table, removeClasses, callback) {\n      table = $(table)[0];\n\n      if (!table.hasInitialized) {\n        return;\n      } // remove all widgets\n\n\n      ts.removeWidget(table, true, false);\n      var events,\n          $t = $(table),\n          c = table.config,\n          $h = $t.find('thead:first'),\n          $r = $h.find('tr.' + ts.css.headerRow).removeClass(ts.css.headerRow + ' ' + c.cssHeaderRow),\n          $f = $t.find('tfoot:first > tr').children('th, td');\n\n      if (removeClasses === false && $.inArray('uitheme', c.widgets) >= 0) {\n        // reapply uitheme classes, in case we want to maintain appearance\n        $t.triggerHandler('applyWidgetId', ['uitheme']);\n        $t.triggerHandler('applyWidgetId', ['zebra']);\n      } // remove widget added rows, just in case\n\n\n      $h.find('tr').not($r).remove(); // disable tablesorter - not using .unbind( namespace ) because namespacing was\n      // added in jQuery v1.4.3 - see http://api.jquery.com/event.namespace/\n\n      events = 'sortReset update updateRows updateAll updateHeaders updateCell addRows updateComplete sorton ' + 'appendCache updateCache applyWidgetId applyWidgets refreshWidgets removeWidget destroy mouseup mouseleave ' + 'keypress sortBegin sortEnd resetToLoadState '.split(' ').join(c.namespace + ' ');\n      $t.removeData('tablesorter').unbind(events.replace(ts.regex.spaces, ' '));\n      c.$headers.add($f).removeClass([ts.css.header, c.cssHeader, c.cssAsc, c.cssDesc, ts.css.sortAsc, ts.css.sortDesc, ts.css.sortNone].join(' ')).removeAttr('data-column').removeAttr('aria-label').attr('aria-disabled', 'true');\n      $r.find(c.selectorSort).unbind('mousedown mouseup keypress '.split(' ').join(c.namespace + ' ').replace(ts.regex.spaces, ' '));\n      ts.restoreHeaders(table);\n      $t.toggleClass(ts.css.table + ' ' + c.tableClass + ' tablesorter-' + c.theme, removeClasses === false);\n      $t.removeClass(c.namespace.slice(1)); // clear flag in case the plugin is initialized again\n\n      table.hasInitialized = false;\n      delete table.config.cache;\n\n      if (typeof callback === 'function') {\n        callback(table);\n      }\n\n      if (ts.debug(c, 'core')) {\n        console.log('tablesorter has been removed');\n      }\n    }\n  };\n\n  $.fn.tablesorter = function (settings) {\n    return this.each(function () {\n      var table = this,\n          // merge & extend config options\n      c = $.extend(true, {}, ts.defaults, settings, ts.instanceMethods); // save initial settings\n\n      c.originalSettings = settings; // create a table from data (build table widget)\n\n      if (!table.hasInitialized && ts.buildTable && this.nodeName !== 'TABLE') {\n        // return the table (in case the original target is the table's container)\n        ts.buildTable(table, c);\n      } else {\n        ts.setup(table, c);\n      }\n    });\n  }; // set up debug logs\n\n\n  if (!(window.console && window.console.log)) {\n    // access $.tablesorter.logs for browsers that don't have a console...\n    ts.logs = [];\n    /*jshint -W020 */\n\n    console = {};\n\n    console.log = console.warn = console.error = console.table = function () {\n      var arg = arguments.length > 1 ? arguments : arguments[0];\n      ts.logs[ts.logs.length] = {\n        date: Date.now(),\n        log: arg\n      };\n    };\n  } // add default parsers\n\n\n  ts.addParser({\n    id: 'no-parser',\n    is: function is() {\n      return false;\n    },\n    format: function format() {\n      return '';\n    },\n    type: 'text'\n  });\n  ts.addParser({\n    id: 'text',\n    is: function is() {\n      return true;\n    },\n    format: function format(str, table) {\n      var c = table.config;\n\n      if (str) {\n        str = $.trim(c.ignoreCase ? str.toLocaleLowerCase() : str);\n        str = c.sortLocaleCompare ? ts.replaceAccents(str) : str;\n      }\n\n      return str;\n    },\n    type: 'text'\n  });\n  ts.regex.nondigit = /[^\\w,. \\-()]/g;\n  ts.addParser({\n    id: 'digit',\n    is: function is(str) {\n      return ts.isDigit(str);\n    },\n    format: function format(str, table) {\n      var num = ts.formatFloat((str || '').replace(ts.regex.nondigit, ''), table);\n      return str && typeof num === 'number' ? num : str ? $.trim(str && table.config.ignoreCase ? str.toLocaleLowerCase() : str) : str;\n    },\n    type: 'numeric'\n  });\n  ts.regex.currencyReplace = /[+\\-,. ]/g;\n  ts.regex.currencyTest = /^\\(?\\d+[\\u00a3$\\u20ac\\u00a4\\u00a5\\u00a2?.]|[\\u00a3$\\u20ac\\u00a4\\u00a5\\u00a2?.]\\d+\\)?$/;\n  ts.addParser({\n    id: 'currency',\n    is: function is(str) {\n      str = (str || '').replace(ts.regex.currencyReplace, ''); // test for £$€¤¥¢\n\n      return ts.regex.currencyTest.test(str);\n    },\n    format: function format(str, table) {\n      var num = ts.formatFloat((str || '').replace(ts.regex.nondigit, ''), table);\n      return str && typeof num === 'number' ? num : str ? $.trim(str && table.config.ignoreCase ? str.toLocaleLowerCase() : str) : str;\n    },\n    type: 'numeric'\n  }); // too many protocols to add them all https://en.wikipedia.org/wiki/URI_scheme\n  // now, this regex can be updated before initialization\n\n  ts.regex.urlProtocolTest = /^(https?|ftp|file):\\/\\//;\n  ts.regex.urlProtocolReplace = /(https?|ftp|file):\\/\\/(www\\.)?/;\n  ts.addParser({\n    id: 'url',\n    is: function is(str) {\n      return ts.regex.urlProtocolTest.test(str);\n    },\n    format: function format(str) {\n      return str ? $.trim(str.replace(ts.regex.urlProtocolReplace, '')) : str;\n    },\n    type: 'text'\n  });\n  ts.regex.dash = /-/g;\n  ts.regex.isoDate = /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}/;\n  ts.addParser({\n    id: 'isoDate',\n    is: function is(str) {\n      return ts.regex.isoDate.test(str);\n    },\n    format: function format(str) {\n      var date = str ? new Date(str.replace(ts.regex.dash, '/')) : str;\n      return date instanceof Date && isFinite(date) ? date.getTime() : str;\n    },\n    type: 'numeric'\n  });\n  ts.regex.percent = /%/g;\n  ts.regex.percentTest = /(\\d\\s*?%|%\\s*?\\d)/;\n  ts.addParser({\n    id: 'percent',\n    is: function is(str) {\n      return ts.regex.percentTest.test(str) && str.length < 15;\n    },\n    format: function format(str, table) {\n      return str ? ts.formatFloat(str.replace(ts.regex.percent, ''), table) : str;\n    },\n    type: 'numeric'\n  }); // added image parser to core v2.17.9\n\n  ts.addParser({\n    id: 'image',\n    is: function is(str, table, node, $node) {\n      return $node.find('img').length > 0;\n    },\n    format: function format(str, table, cell) {\n      return $(cell).find('img').attr(table.config.imgAttr || 'alt') || str;\n    },\n    parsed: true,\n    // filter widget flag\n    type: 'text'\n  });\n  ts.regex.dateReplace = /(\\S)([AP]M)$/i; // used by usLongDate & time parser\n\n  ts.regex.usLongDateTest1 = /^[A-Z]{3,10}\\.?\\s+\\d{1,2},?\\s+(\\d{4})(\\s+\\d{1,2}:\\d{2}(:\\d{2})?(\\s+[AP]M)?)?$/i;\n  ts.regex.usLongDateTest2 = /^\\d{1,2}\\s+[A-Z]{3,10}\\s+\\d{4}/i;\n  ts.addParser({\n    id: 'usLongDate',\n    is: function is(str) {\n      // two digit years are not allowed cross-browser\n      // Jan 01, 2013 12:34:56 PM or 01 Jan 2013\n      return ts.regex.usLongDateTest1.test(str) || ts.regex.usLongDateTest2.test(str);\n    },\n    format: function format(str) {\n      var date = str ? new Date(str.replace(ts.regex.dateReplace, '$1 $2')) : str;\n      return date instanceof Date && isFinite(date) ? date.getTime() : str;\n    },\n    type: 'numeric'\n  }); // testing for ##-##-#### or ####-##-##, so it's not perfect; time can be included\n\n  ts.regex.shortDateTest = /(^\\d{1,2}[\\/\\s]\\d{1,2}[\\/\\s]\\d{4})|(^\\d{4}[\\/\\s]\\d{1,2}[\\/\\s]\\d{1,2})/; // escaped \"-\" because JSHint in Firefox was showing it as an error\n\n  ts.regex.shortDateReplace = /[\\-.,]/g; // XXY covers MDY & DMY formats\n\n  ts.regex.shortDateXXY = /(\\d{1,2})[\\/\\s](\\d{1,2})[\\/\\s](\\d{4})/;\n  ts.regex.shortDateYMD = /(\\d{4})[\\/\\s](\\d{1,2})[\\/\\s](\\d{1,2})/;\n\n  ts.convertFormat = function (dateString, format) {\n    dateString = (dateString || '').replace(ts.regex.spaces, ' ').replace(ts.regex.shortDateReplace, '/');\n\n    if (format === 'mmddyyyy') {\n      dateString = dateString.replace(ts.regex.shortDateXXY, '$3/$1/$2');\n    } else if (format === 'ddmmyyyy') {\n      dateString = dateString.replace(ts.regex.shortDateXXY, '$3/$2/$1');\n    } else if (format === 'yyyymmdd') {\n      dateString = dateString.replace(ts.regex.shortDateYMD, '$1/$2/$3');\n    }\n\n    var date = new Date(dateString);\n    return date instanceof Date && isFinite(date) ? date.getTime() : '';\n  };\n\n  ts.addParser({\n    id: 'shortDate',\n    // 'mmddyyyy', 'ddmmyyyy' or 'yyyymmdd'\n    is: function is(str) {\n      str = (str || '').replace(ts.regex.spaces, ' ').replace(ts.regex.shortDateReplace, '/');\n      return ts.regex.shortDateTest.test(str);\n    },\n    format: function format(str, table, cell, cellIndex) {\n      if (str) {\n        var c = table.config,\n            $header = c.$headerIndexed[cellIndex],\n            format = $header.length && $header.data('dateFormat') || ts.getData($header, ts.getColumnData(table, c.headers, cellIndex), 'dateFormat') || c.dateFormat; // save format because getData can be slow...\n\n        if ($header.length) {\n          $header.data('dateFormat', format);\n        }\n\n        return ts.convertFormat(str, format) || str;\n      }\n\n      return str;\n    },\n    type: 'numeric'\n  }); // match 24 hour time & 12 hours time + am/pm - see http://regexr.com/3c3tk\n\n  ts.regex.timeTest = /^(0?[1-9]|1[0-2]):([0-5]\\d)(\\s[AP]M)$|^((?:[01]\\d|[2][0-4]):[0-5]\\d)$/i;\n  ts.regex.timeMatch = /(0?[1-9]|1[0-2]):([0-5]\\d)(\\s[AP]M)|((?:[01]\\d|[2][0-4]):[0-5]\\d)/i;\n  ts.addParser({\n    id: 'time',\n    is: function is(str) {\n      return ts.regex.timeTest.test(str);\n    },\n    format: function format(str) {\n      // isolate time... ignore month, day and year\n      var temp,\n          timePart = (str || '').match(ts.regex.timeMatch),\n          orig = new Date(str),\n          // no time component? default to 00:00 by leaving it out, but only if str is defined\n      time = str && (timePart !== null ? timePart[0] : '00:00 AM'),\n          date = time ? new Date('2000/01/01 ' + time.replace(ts.regex.dateReplace, '$1 $2')) : time;\n\n      if (date instanceof Date && isFinite(date)) {\n        temp = orig instanceof Date && isFinite(orig) ? orig.getTime() : 0; // if original string was a valid date, add it to the decimal so the column sorts in some kind of order\n        // luckily new Date() ignores the decimals\n\n        return temp ? parseFloat(date.getTime() + '.' + orig.getTime()) : date.getTime();\n      }\n\n      return str;\n    },\n    type: 'numeric'\n  });\n  ts.addParser({\n    id: 'metadata',\n    is: function is() {\n      return false;\n    },\n    format: function format(str, table, cell) {\n      var c = table.config,\n          p = !c.parserMetadataName ? 'sortValue' : c.parserMetadataName;\n      return $(cell).metadata()[p];\n    },\n    type: 'numeric'\n  });\n  /*\n  \t██████ ██████ █████▄ █████▄ ▄████▄\n  \t  ▄█▀  ██▄▄   ██▄▄██ ██▄▄██ ██▄▄██\n  \t▄█▀    ██▀▀   ██▀▀██ ██▀▀█  ██▀▀██\n  \t██████ ██████ █████▀ ██  ██ ██  ██\n  \t*/\n  // add default widgets\n\n  ts.addWidget({\n    id: 'zebra',\n    priority: 90,\n    format: function format(table, c, wo) {\n      var $visibleRows,\n          $row,\n          count,\n          isEven,\n          tbodyIndex,\n          rowIndex,\n          len,\n          child = new RegExp(c.cssChildRow, 'i'),\n          $tbodies = c.$tbodies.add($(c.namespace + '_extra_table').children('tbody:not(.' + c.cssInfoBlock + ')'));\n\n      for (tbodyIndex = 0; tbodyIndex < $tbodies.length; tbodyIndex++) {\n        // loop through the visible rows\n        count = 0;\n        $visibleRows = $tbodies.eq(tbodyIndex).children('tr:visible').not(c.selectorRemove);\n        len = $visibleRows.length;\n\n        for (rowIndex = 0; rowIndex < len; rowIndex++) {\n          $row = $visibleRows.eq(rowIndex); // style child rows the same way the parent row was styled\n\n          if (!child.test($row[0].className)) {\n            count++;\n          }\n\n          isEven = count % 2 === 0;\n          $row.removeClass(wo.zebra[isEven ? 1 : 0]).addClass(wo.zebra[isEven ? 0 : 1]);\n        }\n      }\n    },\n    remove: function remove(table, c, wo, refreshing) {\n      if (refreshing) {\n        return;\n      }\n\n      var tbodyIndex,\n          $tbody,\n          $tbodies = c.$tbodies,\n          toRemove = (wo.zebra || ['even', 'odd']).join(' ');\n\n      for (tbodyIndex = 0; tbodyIndex < $tbodies.length; tbodyIndex++) {\n        $tbody = ts.processTbody(table, $tbodies.eq(tbodyIndex), true); // remove tbody\n\n        $tbody.children().removeClass(toRemove);\n        ts.processTbody(table, $tbody, false); // restore tbody\n      }\n    }\n  });\n})(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/jquery.tablesorter.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/jquery.tablesorter.min.js"]();
/******/ 	
/******/ })()
;